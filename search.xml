<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习</title>
    <url>/2019/10/19/Java/</url>
    <content><![CDATA[<hr>
<h3 id="Java介绍"><a href="#Java介绍" class="headerlink" title="Java介绍"></a>Java介绍</h3><hr>
<p> 简单地说，Java 是由 Sun Microsystems 公司于 1995 年推出的一门面向对象程序设计语言。2010 年 Oracle 公司收购 Sun Microsystems，之后由 Oracle 公司负责 Java 的维护和版本升级。</p>
<p>其实，Java 还是一个平台。Java 平台由 Java 虚拟机（Java Virtual Machine，JVM）和 Java 应用编程接口（Application Programming Interface，API）构成。Java 应用编程接口为此提供了一个独立于操作系统的标准接口，可分为基本部分和扩展部分。在硬件或操作系统平台上安装一个 Java 平台之后，Java 应用程序就可运行。</p>
<p>Java 平台已经嵌入了几乎所有的操作系统。这样 Java 程序只编译一次，就可以在各种系统中运行。Java 应用编程接口已经从 1.1x 版本发展到 1.2 版本。常用的 Java 平台基于 Java 1.6，最新版本为 Java 1.8。</p>
<p>Java 发展至今，就力图使之无所不能。在世界编程语言排行榜中，近年来 Java 一直稳居第一名，比第二名的C语言高出几个百分点。</p>
<h3 id="Java标识符和关键字"><a href="#Java标识符和关键字" class="headerlink" title="Java标识符和关键字"></a>Java标识符和关键字</h3><p> 数据类型：boolean、int、long、short、byte、float、double、char、class、interface。<br>流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally。<br>修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native。<br>动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new。<br>保留字：true、false、null、goto、const。</p>
<p>基本数据类型又可分为 4 大类，即整数类型（包括 byte、short，int 和 long）、浮点类型（包括 float 和 double）、布尔类型和字符类型（char），<br>Java 定义了 4 种整数类型变量：字节型（byte）、短整型（short）、整型（int）和长整型（long）。这些都是有符号的值，正数或负数。</p>
<h3 id="名称-说明"><a href="#名称-说明" class="headerlink" title="名称 说明"></a>名称 说明</h3><p>字节型（byte）	byte 类型是最小的整数类型。当用户从网络或文件中处理数据流时，或者处理可能与 Java 的其他内置类型不直接兼容的未加工的二进制数据时，该类型非常有用。<br>短整型（short）	short 类型限制数据的存储为先高字节，后低字节，这样在某些机器中会出错，因此该类型很少被使用。<br>整型（int）	int 类型是最常使用的一种整数类型。<br>长整型（long）	对于大型程序常会遇到很大的整数，当超出 int 类型所表示的范围时就要使用 long 类型。</p>
<h5 id="public"><a href="#public" class="headerlink" title="public"></a>public</h5><p>  它用来表示公共类。另外，static 和 void 也是关键字，它们的使用将在本教程后面的章节中详细介绍。</p>
<h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><p>  是定义常量的关键字  final 关键字表示最终的，它可以修改很多元素，修饰变量就变成了常量</p>
<h5 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h5> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">char</span> usersex=<span class="string">&#x27;女&#x27;</span>;    <span class="comment">// 直接赋值</span></span><br><span class="line"> -----------------------</span><br><span class="line"> String username;    <span class="comment">// 先声明</span></span><br><span class="line"> username =<span class="string">&quot;琪琪&quot;</span>;    <span class="comment">// 后赋值</span></span><br><span class="line">--------------------------</span><br><span class="line"> String username,address,phone,tel;    <span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="type">int</span> num1=<span class="number">12</span>,num2=<span class="number">23</span>,result=<span class="number">35</span>;    <span class="comment">// 声明并初始化多个变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><h3 id="名称-修饰-访问-生命周期"><a href="#名称-修饰-访问-生命周期" class="headerlink" title="名称 修饰	        访问	        生命周期"></a>名称 修饰	        访问	        生命周期</h3><p>全局变量（实例变量）|	无 static 修饰 |	对象名.变量名	只要对象被当作引用，实例变量就将存在<br>静态变量（类变量）	| 用 static 修饰 |	类名.变量名或对象名.变量名	其生命周期取决于类的生命周期。类被垃圾回收机制彻底回收时才会被销毁<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataClass</span> &#123;</span><br><span class="line">    String name; <span class="comment">// 成员变量、实例变量</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">// 成员变量、实例变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">website</span> <span class="operator">=</span> <span class="string">&quot;C语言中文网&quot;</span>; <span class="comment">// 成员变量、静态变量(类变量)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;http://c.biancheng.net&quot;</span>; <span class="comment">// 成员变量、静态变量(类变量)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>局部变量是指在方法或者方法代码块中定义的变量，其作用域是其所在的代码块。可分为以下三种：<br>方法参数变量（形参）：在整个方法内有效。<br>方法局部变量（方法内定义）： 从定义这个变量开始到方法结束这一段时间内有效。<br>代码块局部变量（代码块内定义）：从定义这个变量开始到代码块结束这一段时间内有效。</p>
<p>局部变量在使用前必须被程序员主动初始化值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 声明一个 int 类型的局部变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;s=&quot;</span> + s);</span><br><span class="line">            System.out.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Nuxtjs学习</title>
    <url>/2019/10/22/Nuxt/</url>
    <content><![CDATA[<hr>
<h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a><a href="https://www.nuxtjs.cn/guide">官网介绍</a></h3><h4 id="关于-Nuxt-js"><a href="#关于-Nuxt-js" class="headerlink" title="关于 Nuxt.js"></a>关于 Nuxt.js</h4><hr>
<p>2016 年 10 月 25 日，zeit.co 背后的团队对外发布了 Next.js，一个 React 的服务端渲染应用框架。几小时后，与 Next.js 异曲同工，一个基于 Vue.js 的服务端渲染应用框架应运而生，我们称之为：Nuxt.js。</p>
<h4 id="Nuxt-js-是什么？"><a href="#Nuxt-js-是什么？" class="headerlink" title="Nuxt.js 是什么？"></a>Nuxt.js 是什么？</h4><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。</p>
<p>通过对客户端&#x2F;服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI 渲染。</p>
<p>我们的目标是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有 Node.js 项目中使用 Nuxt.js。</p>
<p>Nuxt.js 预设了利用 Vue.js 开发服务端渲染的应用所需要的各种配置。</p>
<p>除此之外，我们还提供了一种命令叫：nuxt generate ，为基于 Vue.js 的应用提供生成对应的静态站点的功能。</p>
<p>我们相信这个命令所提供的功能，是向开发集成各种微服务（Microservices）的 Web 应用迈开的新一步。</p>
<p>作为框架，Nuxt.js 为 客户端&#x2F;服务端 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等。</p>
<h3 id="Nuxtjs特性"><a href="#Nuxtjs特性" class="headerlink" title="Nuxtjs特性"></a>Nuxtjs特性</h3><ul>
<li>基于 Vue.js</li>
<li>自动代码分层</li>
<li>服务端渲染</li>
<li>强大的路由功能，支持异步数据</li>
<li>静态文件服务</li>
<li>ES2015+ 语法支持</li>
<li>打包和压缩 JS 和 CSS</li>
<li>HTML 头部标签管理</li>
<li>本地开发支持热加载</li>
<li>集成 ESLint</li>
<li>支持各种样式预处理器： SASS、LESS、 Stylus 等等</li>
<li>支持 HTTP&#x2F;2 推送*</li>
</ul>
<h3 id="Nuxtjs-和-Vue的区别"><a href="#Nuxtjs-和-Vue的区别" class="headerlink" title="Nuxtjs 和 Vue的区别"></a>Nuxtjs 和 Vue的区别</h3><ul>
<li><p>路由 nuxt按照 pages 文件夹的目录结构自动生成路由 vue需在 src&#x2F;router&#x2F;index.js 手动配置路由</p>
</li>
<li><p>nuxt nuxt 类似 router-view , nuxt-link 类似 router-link</p>
</li>
<li><p>webpack配置 nuxt内置webpack，允许根据服务端需求，在 nuxt.config.js 中的build属性自定义构建webpack的配置，覆盖默认配置 vue关于webpack的配置存放在build文件夹下</p>
</li>
<li><p>项目入口 nuxt: 没有main.js入口文件，项目初始化的操作需要通过nuxt.config.js进行配置指定。 vue: &#x2F;src&#x2F;main.js，在main.js可以做一些全局注册的初始化工作；</p>
</li>
<li><p>网页渲染流程 vue: 客户端渲染，先下载js后，通过ajax来渲染页面； nuxt： 服务端渲染，可以做到服务端拼接好html后直接返回，首屏可以做到无需发起ajax请求；</p>
</li>
<li><p>build后目标产物不同 vue: dist uxt: .nuxt</p>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npx create-nuxt-app &lt;项目名&gt;</span><br><span class="line"><span class="comment">//  或</span></span><br><span class="line">$ yarn create nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li>资源目录<br> assets 用于组织未编译的静态资源如 LESS、SASS 或 JavaScript。</li>
<li>组件目录<br> components 用于组织应用的 Vue.js 组件。Nuxt.js 不会扩展增强该目录下 Vue.js 组件，即这些组件不会像页面组件那样有 asyncData 方法的特性。</li>
<li>布局目录<br> layouts 用于组织应用的布局组件。</li>
<li>middleware 目录<br> 用于存放应用的中间件。</li>
<li>页面目录 pages<br> 用于组织应用的路由及视图。Nuxt.js 框架读取该目录下所有的 .vue 文件并自动生成对应的路由配置。</li>
<li>插件目录 plugins<br> 用于组织那些需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件。</li>
<li>静态文件目录 static<br> 用于存放应用的静态文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理。服务器启动的时候，该目录下的文件会映射至应用的根路径 &#x2F; 下。</li>
<li>store 目录<br> 用于组织应用的 Vuex 状态树 文件。 Nuxt.js 框架集成了 Vuex 状态树 的相关功能配置，在 store 目录下创建一个 index.js 文件可激活这些配置。</li>
<li>nuxt.config.js<br> 文件用于组织 Nuxt.js 应用的个性化配置，以便覆盖默认配置。</li>
</ul>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p> Nuxt.js 依据 pages 目录结构自动生成 vue-router 模块的路由配置。<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul>
<li>pages 文件下   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pages/</span><br><span class="line"> --| user/</span><br><span class="line">   -----| index.<span class="property">vue</span></span><br><span class="line">    -----| one.<span class="property">vue</span></span><br><span class="line">   --| index.<span class="property">vue</span></span><br></pre></td></tr></table></figure></li>
<li>生成的路由<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">router</span>: &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/user/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user-one&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/one&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/user/one.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">router</span>: &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;users-id&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/users/:id?&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/users/_id.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/:slug&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/_slug/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;slug-comments&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/:slug/comments&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/_slug/comments.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>React</title>
    <url>/2019/10/19/React/</url>
    <content><![CDATA[<hr>
<h3 id="react简介"><a href="#react简介" class="headerlink" title="react简介"></a>react简介</h3><hr>
<p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。<br>React 中拥有多种不同类型的组件，我们先从 React.Component 的子类开始介绍：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class ShoppingList extends React.Component &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;shopping-list&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span> &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;Instagram&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;Oculus&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用法示例: &lt;ShoppingList name=<span class="string">&quot;Mark&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>我们马上会讨论这些又奇怪、又像 XML 的标签。我们通过使用组件来告诉 React 我们希望在屏幕上看到什么。当数据发生改变时，React 会高效地更新并重新渲染我们的组件。</p>
<h3 id="创建react项目"><a href="#创建react项目" class="headerlink" title="创建react项目"></a>创建react项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app 项目名</span><br></pre></td></tr></table></figure>

<p>清空src目录<br>创建index.js</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> src/*</span><br><span class="line"><span class="built_in">touch</span> src/index.js</span><br></pre></td></tr></table></figure>

<p>index.js 入口js: 用react-dom渲染注入点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const root = ReactDOM.createRoot(dom节点)</span><br><span class="line">root.render(&lt;App /&gt;)</span><br></pre></td></tr></table></figure>
<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>JSX: Javascript + XML<br>JSX是一个语法糖，React.createElement的语法糖</p>
<p>React.createElement定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">React.createElement(组件, [属性props], [...children]) // 返回jsx元素</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element1 = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// element1的值叫做jsx的元素</span></span><br><span class="line">                                <span class="comment">// h1叫做jsx的组件</span></span><br><span class="line"><span class="keyword">const</span> element2 = <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>        <span class="comment">// element2是元素</span></span><br><span class="line">                                <span class="comment">// App是组件</span></span><br><span class="line"><span class="keyword">const</span> element3 = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;okBtn&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> element4 = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span>)</span><br></pre></td></tr></table></figure>
<p>React.createElement函数表达以上的代码(Babel转换成下面的代码)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element1 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> element2 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> element3 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;button&#x27;</span>, &#123;<span class="attr">id</span>: <span class="string">&#x27;okBtn&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;button&#x27;</span>&#125;, <span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> element4 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;select&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;city&#x27;</span>&#125;,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;option&#x27;</span>, &#123;<span class="attr">value</span>: <span class="string">&quot;1&quot;</span>&#125;, <span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;option&#x27;</span>, &#123;<span class="attr">value</span>: <span class="string">&quot;2&quot;</span>&#125;, <span class="string">&#x27;上海&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="html和jsx的转换关系"><a href="#html和jsx的转换关系" class="headerlink" title="html和jsx的转换关系"></a>html和jsx的转换关系</h3><p>第一点：<strong>jsx要符合xml的标准，jsx的html组件必须名字为小写</strong>：</p>
<ul>
<li>tag必须成对出现(<code>&lt;div&gt;...&lt;/div&gt;</code>)</li>
<li>或者自结束标签(<code>&lt;input /&gt;</code>)<br>html的tag结构不严谨<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el1 = &lt;h1&gt;&lt;<span class="regexp">/H1&gt; /</span><span class="regexp">/ ❌ 大小写不一样</span></span><br><span class="line"><span class="regexp">const el2 = &lt;H1&gt;&lt;/</span><span class="variable constant_">H1</span>&gt; <span class="comment">// ❌ 不是html里的h1对应的组件，而是自定义H1组件</span></span><br><span class="line"><span class="keyword">const</span> el3 = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> &gt;</span> // ❌ 无关闭标记</span></span><br><span class="line"><span class="language-xml">const el4 = <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>hello <span class="tag">&lt;<span class="name">i</span>&gt;</span>world<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> // ❌ 没有正确嵌套</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>第二点，<strong>jsx的属性名称由两个单词组成，用驼峰形式书写；html属性是不区分大小写的。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input value=<span class="string">&#x27;&#x27;</span> autoComplete=<span class="string">&#x27;on&#x27;</span> data-id=<span class="string">&#x27;name&#x27;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colSpan</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>第三点：<strong>有一些属性名称在jsx中改变了:</strong></p>
<ul>
<li>class -&gt; className</li>
<li>for -&gt; htmlFor<br>因为class和for都是js里的关键字，避免用关键字命名</li>
</ul>
<p>第四点：<strong>有一些属性是html没有的</strong></p>
<ul>
<li>key - 值字符串，为了表示元素唯一性</li>
<li>ref - 为了引用dom元素或者jsx元素</li>
<li>defaultValue 用来代替 value属性</li>
<li>defaultChecked 用来代替checked属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> value=<span class="string">&#x27;abc&#x27;</span>/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">defaultValue</span>=<span class="string">&#x27;abc&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">checked</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">defaultChecked</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>第五点，<strong>html的style是字符串，jsx的style属性是object（dom里style对象的方式书写）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#x27;font-size: 18px; color: red; text-decoration: underline&#x27;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;span style=&#123;&#123;<span class="attr">fontSize</span>: <span class="string">&quot;18px&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">textDecoration</span>: <span class="string">&quot;underline&quot;</span>&#125;&#125;&gt;<span class="title class_">Hello</span> <span class="title class_">World</span>&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = &#123;<span class="attr">fontSize</span>: <span class="string">&quot;18px&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">textDecoration</span>: <span class="string">&quot;underline&quot;</span>&#125;</span><br><span class="line">&lt;span style=&#123;styles&#125;&gt;<span class="title class_">Hello</span> <span class="title class_">World</span>&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>第六点，<strong>开关属性（cheched, disabled, readOnly）值是布尔类型</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> readOnly=&#123;<span class="literal">true</span>&#125; /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span> &#123;<span class="comment">/*错*/</span>&#125;</span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&quot;<span class="attr">container</span>&quot;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">value</span>=<span class="string">&#123;1&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>第七点，<strong>children位置（指元素标记之间的内容<code>&lt;b&gt;...&lt;/b&gt;</code>）用字符串表达式，里面的内容会自动转义（html特殊字符会转换成html entity，<code>&gt;  转换成 &amp;gt;</code> ）避免XSS攻击</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;<span class="string">&quot;&lt;b&gt;hello&lt;/b&gt; world&quot;</span>&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:</span> &quot;&lt;<span class="attr">b</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span> world&quot;&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>第八点，<strong>html的注释<code>&lt;!-- 注释内容 --&gt;</code>，jsx的注释<code>&#123;/* 注释 */&#125;</code></strong></p>
<p>第九点，<strong>html里换行也是一个空格，jsx里换行不是空格</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>红灯<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>绿灯<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 红灯 绿灯 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;红灯&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>绿灯<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;<span class="comment">/* 红灯绿灯 */</span>&#125;</span><br><span class="line"></span><br><span class="line">&lt;span&gt;红灯&lt;/span&gt;&#123;<span class="string">&#x27; &#x27;</span>&#125;</span><br><span class="line">&lt;span&gt;绿灯&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h3 id="表达式使用"><a href="#表达式使用" class="headerlink" title="表达式使用"></a>表达式使用</h3><p>表达式用<code>&#123;表达式&#125;</code>，表达式只能写一个语句（if&#x2F;for&#x2F;while&#x2F;switch不能在表达式里使用）</p>
<p>表达式可以用在children位置或者属性值位置</p>
<p>children位置的表达式里不能是普通object</p>
<p>有一些值放在表达式里没有任何渲染内容：false&#x2F;true&#x2F;null&#x2F;undefined&#x2F;NaN</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="literal">null</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>+<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="title class_">Math</span>.<span class="title function_">random</span>()&#125;</span><br><span class="line">&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">&#123;<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="string">&#x27;正面&#x27;</span> : <span class="string">&#x27;背面&#x27;</span>&#125;</span><br><span class="line">&#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>)&#125;</span><br><span class="line">&#123;(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()&gt;<span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()&#125;</span><br><span class="line">&lt;div className=&#123;<span class="string">`row <span class="subst">$&#123;index%<span class="number">2</span> ? <span class="string">&#x27;bg&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>&#125;&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;[1,2,3]&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;[<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>,<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span>,<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>]&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>表达式的扩展语法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  <span class="attr">className</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">style</span>: &#123;<span class="attr">border</span>: <span class="string">&#x27;1px solid red&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">defaultValue</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input className=&#123;params.<span class="property">className</span>&#125; style=&#123;params.<span class="property">style</span>&#125; defaultValue=&#123;params.<span class="property">defaultValue</span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&#x27;xyz&#x27;</span> &#123;<span class="attr">...params</span>&#125; <span class="attr">className</span>=<span class="string">&#x27;a&#x27;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/2023/03/28/hello-world/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><hr>
<p>世上有两句疑问：这个程序怎么不运行？这个程序怎么运行了？我的博客 记录与2022.9.1这意味着这是一个新的开始<br>这里面包括了  vue2&#x2F;3  javascript  React Html  css Es6 还有Nodejs，一串代码往往伴随着优化，接下来让我们一起努力吧</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>小程序</title>
    <url>/2019/10/25/Small_program/</url>
    <content><![CDATA[<hr>
<h3 id="浅谈小程序"><a href="#浅谈小程序" class="headerlink" title="浅谈小程序"></a>浅谈小程序</h3><hr>
<p>在 2016 年的「微信公开课 Pro」演讲中，微信事业群总裁张小龙这样描述了小程序的前景与未来：</p>
<p>“ 小程序是一种不需要下载安装即可使用的应用，它实现了应用 “触手可及” 的梦想，用户扫一扫或者搜一下即可打开应用。也体现了 “用完即走” 的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无须安装卸载 “。</p>
<p>小程序刚发布的时候要求压缩包的体积不能大于 1M，否则无法通过，在 2017 年 4 月做 了改进，由原来的 1M 提升到 2M；</p>
<p>2017 年 1 月 9 日 0 点，万众瞩目的微信第一批小程序正式低调上线。</p>
<h3 id="什么样的应用适合使用小程序开发"><a href="#什么样的应用适合使用小程序开发" class="headerlink" title="什么样的应用适合使用小程序开发?"></a>什么样的应用适合使用小程序开发?</h3><p>虽然小程序市场时至今日依然是一片蓝海，但我想也不是所有应用「都可以，都应该」使用小程序开发的。</p>
<p>基于我们的经验与积累来说，符合「逻辑简单，使用低频，对性能要求不极致」的应用场景，更加适合使用小程序进行研发。</p>
<p>逻辑简单：是指应用的操作逻辑并不十分复杂，各类生活服务（如打车，订餐，查地图与导航等等）都需要给用户提供简单清晰的操作逻辑，而这一类也天然的符合起初小程序「用完即走」的定义，因此十分符合使用小程序研发。一些逻辑复杂的应用场景想要通过小程序进行适配，就可能会面临更多的设计与研发困难，同时在性能和体验也可能会面对更多需要解决的问题。</p>
<p>使用低频：是指小程序的使用频率不应该太高，比如社交类的钉钉或飞书，金融类的掌上生活或浦大喜奔，媒体类的网易云音乐或斗鱼都不太适合使用小程序进行重新设计。对于用户使用的频率较高的应用来说，直接打开应用进行体验的步骤肯定最快的，此外由于某些行业的特殊性质（比如具备交易，支付等能力）要求，对于安全性与保密性的首选风险判断原则，也不宜使用常见的小程序进行设计。</p>
<p>对性能要求不极致：是指由于小程序始终存在于某个独立应用（也被称为宿主应用）中，考虑到目前的性能与研发所限制，暂时不太适合开发对于这两者有更高要求的移动应用。比如把原神，王者荣耀这样的游戏应用通过小程序进行重新设计，在目前来说肯定是不现实的。</p>
<p>当然，随着相关研发实力的增强与产业生态的逐渐补充，也有越来越多的「不可能」变为了「可能」，比如华西证券的「华彩人生」，浦发银行的「浦大喜奔」，某省的移动警务平台等客户都选择使用小程序容器方案进行落地实现</p>
<h3 id="小程序与H5，原生应用有何区别？"><a href="#小程序与H5，原生应用有何区别？" class="headerlink" title="小程序与H5，原生应用有何区别？"></a>小程序与H5，原生应用有何区别？</h3><p>很多朋友在了解小程序技术的时候，都会有这样的疑惑“到底与 H5，原生应用”这些技术相比，小程序具有哪些优势与劣势呢？</p>
<h3 id="H5-移动应用"><a href="#H5-移动应用" class="headerlink" title="H5 移动应用"></a>H5 移动应用</h3><p>我们常说的 H5 其实也通常可以被视为一种 Web App，相比于我们在桌面端浏览器中打开的网页，主要是增加了一些响应式的设计与交互优化，从而使得这些网页更适合在移动端的浏览器中显示运行。既然是网页应用，那依然是基于 JavaScript，CSS 和 HTML 进行实现的，由于是基于各类前端技术栈进行实现，最大的好处就是快速、简单、方便，且有各种技术资料可以参考。</p>
<p>同样，H5 的缺点与优点也是并存的，比如由于技术已经很成熟了，对于前端经验欠缺的新人来说，面对各式各样的框架，模块、任务管理工具，UI 库可能会出现无从下手的问题；此外相比于原生应用，对于系统权限的获取（比如数据缓存能力，网络通信状态等）都显得比较鸡肋，当低性能的设备加载包含复杂逻辑的页面时，会出现明显的卡顿与延迟问题。</p>
<h3 id="原生应用"><a href="#原生应用" class="headerlink" title="原生应用"></a>原生应用</h3><p>原生应用也被叫做 Native App，相比于 H5 应用通过前端三大件进行实现不同，原生应用主要会采用 iOS 与 Android 的专有语言 Object-C（或 Swift），Java（或 Kotlin）进行实现，大多我们所常见的国民应用，比如微信，支付宝等都属于这种原生应用。</p>
<p>既然被叫做「原生应用」，就像操作系统的亲儿子一样，天然在性能与体验上具备优秀的潜质，也有组件库丰富，接口支持完善等各种优势特点。但原生应用最大的缺陷就是不能跨平台研发，以目前的主流市场为例，必须要支持 iOS 与 Android 两个主流平台。</p>
<h3 id="混合应用"><a href="#混合应用" class="headerlink" title="混合应用"></a>混合应用</h3><p>混合应用一般被称为 Hybrid App。简单来说，混合应用就是将原生功能封装成对应的 JS 接口，在前端使用 H5 来开发对应的 App （即 H5 作为内容+原生应用作为壳） ，看上去虽然是一个移动原生应用整体，但实际的页面还是网页，一套代码可以生成 iOS 与 Android 两种安装包，开发成本较低。</p>
<p>我们常见的淘宝，京东等应用由于更新与优化节奏都十分快速，为了更好的响应「贴近用户」的目标，应用中有的功能通过原生 Native 实现，有的功能则通过 H5 页面进行实现，这种应用就属于我们所说的混合应用。</p>
<h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>严格意义上来说，小程序并不属于以上 3 种应用的任何一种。小程序主要通过 JavaScript 与 CSS 这种常见的前端技术进行开发，但又没有完全使用 HTML 进行实现，在不同的操作系统中，JavaScript 代码分别运行在 iOS 的 JavaScriptCore 与 Android 的 X5 JSCore 中，各家小程序平台或多或少都有一部分自研的核心，因此渲染视图层的组件也有所不同。</p>
<h3 id="相比「-H5-移动应用」与「-移动原生应用」，小程序具备如下优势："><a href="#相比「-H5-移动应用」与「-移动原生应用」，小程序具备如下优势：" class="headerlink" title="相比「 H5 移动应用」与「 移动原生应用」，小程序具备如下优势："></a>相比「 H5 移动应用」与「 移动原生应用」，小程序具备如下优势：</h3><p>具备跨平台的能力，一套代码可以在 iOS 与 Android 两个平台中运行；<br>远超过 H5 的体验（支持本地缓存，Webview，有丰富的组件与支持库）；<br>能获取更多系统权限，完成更加丰富的产品设计；<br>可以避免 DOM 泄露（不使用常用的 window 对象与 document 对象）；<br>开发简单，上手成本低（比如 FinClip 提供了 FIDE 与开发文档）；</p>
]]></content>
  </entry>
  <entry>
    <title>Nodejs内容</title>
    <url>/2019/10/22/nodejs/</url>
    <content><![CDATA[<hr>
<h3 id="Nodejs简介"><a href="#Nodejs简介" class="headerlink" title="Nodejs简介"></a>Nodejs简介</h3><hr>
<p>以下引自 <a href="http://nodejs.cn/api-v16/">Node.js 官网</a>：<br>    不是编程语言<br>    也不是框架和库<br>    是一个 JavaScript 运行时（环境） </p>
<pre><code> 能解析和执行 JavaScript 代码（严格来说应该是 ECMAScript 代码）
构建于 Chrome V8 JavaScript 引擎之上 
为 JavaScript 提供了服务端编程的能力 

 文件 IO

 网络 IO
从技术角度它的能力和 Java、PHP、Python、Perl、Ruby 等服务端技术类似 
</code></pre>
<h3 id="Node-的特点"><a href="#Node-的特点" class="headerlink" title="Node 的特点"></a>Node 的特点</h3><pre><code>事件驱动 
非阻塞 IO（异步） 模型 
单线程 
跨平台 
</code></pre>
<h3 id="Node-的运行机制"><a href="#Node-的运行机制" class="headerlink" title="Node 的运行机制"></a>Node 的运行机制</h3><p>多线程处理机制：<br>  <img src="/images/node1.jpeg" alt="alt" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="Web-服务器（Apache、Tomcat、IIS）："><a href="#Web-服务器（Apache、Tomcat、IIS）：" class="headerlink" title="Web 服务器（Apache、Tomcat、IIS）："></a>Web 服务器（Apache、Tomcat、IIS）：</h4><pre><code>请求进来 
Web 服务器开启一个线程来处理用户请求 
同一时间有 n 请求，服务器就需要开启 n 个线程 

 一个线程最少得消耗 8MB 内存

 对于一个 8GB 内存的服务器来说，它能应对的并发数是 1024 * 8 / 8 = 1024 个并发
</code></pre>
<h4 id="事件驱动处理模型："><a href="#事件驱动处理模型：" class="headerlink" title="事件驱动处理模型："></a>事件驱动处理模型：</h4><pre><code>Node 中低层封装了一堆的异步操作 API 

 文件操作

 网络操作

 ...
JavaScript 语言本身是单线程的 
</code></pre>
<p>  <img src="/images/node2.jpeg" alt="alt" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="模块通信规则"><a href="#模块通信规则" class="headerlink" title="模块通信规则"></a>模块通信规则</h3><h5 id="require-模块导入"><a href="#require-模块导入" class="headerlink" title="require 模块导入"></a>require 模块导入</h5> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> // 核心模块</span><br><span class="line">var fs = require(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">// 第三方模块</span><br><span class="line">// npm install marked</span><br><span class="line">var marked = require(<span class="string">&quot;marked&quot;</span>);</span><br><span class="line"></span><br><span class="line">// 用户模块（自己写的），正确的，正确的方式</span><br><span class="line">// 注意：加载自己写的模块，相对路径不能省略 ./</span><br><span class="line">var foo = require(<span class="string">&quot;./foo.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">// 用户模块（自己写的），正确的（推荐），可以省略后缀名 .js</span><br><span class="line">var foo = require(<span class="string">&quot;./foo&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="require内部处理流程"><a href="#require内部处理流程" class="headerlink" title="require内部处理流程"></a>require内部处理流程</h4><ol>
<li>检查Module._cache是够缓存到了指定模块</li>
<li>如果缓存没有的话，就创建一个新的module实例将他保存到缓存</li>
<li>module.load()加载指定模块</li>
<li>在解析的过程中如果发生异变，仓缓存中删除该模块</li>
<li>返回该模块的moudule.exprots</li>
</ol>
<h4 id="exports-模块导出"><a href="#exports-模块导出" class="headerlink" title="exports 模块导出"></a>exports 模块导出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 导出多个成员：写法一</span><br><span class="line">module.exports.a = 123;</span><br><span class="line">module.exports.b = 456;</span><br><span class="line">module.exports.c = 789;</span><br><span class="line">//导出多个成员：写法二（推荐）Node 为了降低开发人员的痛苦，所以为 module.exports 提供了一个别名 exports （下面协大等价于上面的写法）。 </span><br><span class="line">console.log(exports === module.exports); // =&gt; <span class="literal">true</span></span><br><span class="line">exports.a = 123;</span><br><span class="line">exports.b = 456;</span><br><span class="line">exports.c = 789;</span><br><span class="line">exports.fn = <span class="function"><span class="title">function</span></span>() &#123;&#125;;</span><br><span class="line">//导出单个成员：（唯一的写法）：</span><br><span class="line">// 导出单个成员：错误的写法</span><br><span class="line">// 因为每个模块最终导出是 module.exports 而不是 exports 这个别名</span><br><span class="line">// exports = <span class="keyword">function</span> (x, y) &#123;</span><br><span class="line">//   <span class="built_in">return</span> x + y</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 导出单个成员：必须这么写</span><br><span class="line">module.exports = <span class="keyword">function</span>(x, y) &#123;</span><br><span class="line">  <span class="built_in">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h3><p>   exports 和 module.exports 的区别 </p>
<pre><code> 每个模块中都有一个 module 对象

 module 对象中有一个 exports 对象

 我们可以把需要导出的成员都挂载到 module.exports 接口对象中

 也就是：moudle.exports.xxx = xxx 的方式

 但是每次都 moudle.exports.xxx = xxx 很麻烦，点儿的太多了

 所以 Node 为了你方便，同时在每一个模块中都提供了一个成员叫：exports

 exports === module.exports 结果为 true

 所以对于：moudle.exports.xxx = xxx 的方式 完全可以：expots.xxx = xxx

 当一个模块需要导出单个成员的时候，这个时候必须使用：module.exports = xxx 的方式

 不要使用 exports = xxx 不管用

 因为每个模块最终向外 return 的是 module.exports

 而 exports 只是 module.exports 的一个引用

 所以即便你为 exports = xx 重新赋值，也不会影响 module.exports

 但是有一种赋值方式比较特殊：exports = module.exports 这个用来重新建立引用关系的

 之所以让大家明白这个道理，是希望可以更灵活的去用它
</code></pre>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h4><p> | API	| 作用 | 备注 |</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fs.access(path, callback)	判断路径是否存在	</span><br><span class="line"></span><br><span class="line">fs.appendFile(file, data, callback)	向文件中追加内容	</span><br><span class="line"></span><br><span class="line">fs.copyFile(src, callback)	复制文件	</span><br><span class="line"></span><br><span class="line">fs.mkdir(path, callback)	创建目录	</span><br><span class="line"></span><br><span class="line">fs.readDir(path, callback)	读取目录列表	</span><br><span class="line"></span><br><span class="line">fs.rename(oldPath, newPath, callback)	重命名文件/目录	</span><br><span class="line"></span><br><span class="line">fs.rmdir(path, callback)	删除目录	只能删除空目录</span><br><span class="line"></span><br><span class="line">fs.stat(path, callback)	获取文件/目录信息	</span><br><span class="line"></span><br><span class="line">fs.unlink(path, callback)	删除文件	</span><br><span class="line"></span><br><span class="line">fs.watch(filename[, options][, listener])	监视文件/目录	</span><br><span class="line"></span><br><span class="line">fs.watchFile(filename[, options], listener)	监视文件	</span><br></pre></td></tr></table></figure>
<h4 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h4><p>参考文档：<a href="https://nodejs.org/dist/latest-v9.x/docs/api/path.htmlpath">https://nodejs.org/dist/latest-v9.x/docs/api/path.htmlpath</a> 是 Node 本身提供的一个核心模块，专门用来处理路径。<br>使用它的第一步就是先加载： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h5><p>获取一个路径的文件名部分 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(<span class="string">&quot;/foo/bar/baz/asdf/quux.html&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;quux.html&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">basename</span>(<span class="string">&quot;/foo/bar/baz/asdf/quux.html&quot;</span>, <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;quux&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="path-dirname"><a href="#path-dirname" class="headerlink" title="path.dirname"></a>path.dirname</h5><p> 获取一个路径的目录部分<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> path.<span class="title function_">dirname</span>(<span class="string">&quot;/foo/bar/baz/asdf/quux&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;/foo/bar/baz/asdf&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h5><p>获取一个路径的后缀名部分 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;.html&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">extname</span>(<span class="string">&quot;index.coffee.md&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;.md&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">extname</span>(<span class="string">&quot;index.&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">extname</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">extname</span>(<span class="string">&quot;.index&quot;</span>);</span><br><span class="line"><span class="comment">// Returns: &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Node-express"><a href="#Node-express" class="headerlink" title="Node + express"></a>Node + express</h3><h4 id="Express-介绍"><a href="#Express-介绍" class="headerlink" title="Express 介绍"></a>Express 介绍</h4><p>  Express 是一个基于 Node.js 平台，快速、开放、极简的 web 开发框架。 它可以轻松构建各种web应用，例如：<br>        接口服务<br>        传统的web网站<br>        开发工具集成等（例如webpack的devServer）</p>
<p> Express本身是极简的，仅仅提供了web开发的基础功能，但是它通过中间件的方式集成了许许多多的外部插件来处理HTTP请求。<br>            body-parser：解析HTTP请求体<br>            compression：压缩HTTP响应<br>            cookie-parser：解析cookie 数据<br>            cors：处理跨域资源请求<br>            morgan：HTTP请求日志记录</p>
<p> Express中间件的特性固然强大，但是它所提供的灵活性是一把双刃剑。<br>        它让Express本身变得更加灵活和简单<br>        缺点在于虽然有一些中间件包可以解决几乎所有问题或需求，但是挑选合适的包有时也会成为一个挑战<br>        有很多流行框架基于 Express<br>        <a href="https://www.expressjs.com.cn/4x/api.html">Express 官网 </a></p>
<h3 id="express-安装"><a href="#express-安装" class="headerlink" title="express 安装"></a>express 安装</h3><p> 参考文档：<a href="http://expressjs.com/en/starter/installing.html">http://expressjs.com/en/starter/installing.html</a><br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 创建并切换到 myapp 目录</span></span><br><span class="line"><span class="built_in">mkdir</span> myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 package.json 文件</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 express 到项目中</span></span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure></p>
<h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0. 加载 Express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 调用 express() 得到一个 app</span></span><br><span class="line"><span class="comment">//    类似于 http.createServer()</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置请求对应的处理函数</span></span><br><span class="line"><span class="comment">//    当客户端以 GET 方法请求 / 的时候就会调用第二个参数：请求处理函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听端口号，启动 Web 服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;app listening on port 3000!&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="查看更多Express内容"><a href="#查看更多Express内容" class="headerlink" title="查看更多Express内容"></a><a href="/node-about/express">查看更多Express内容</a></h3>]]></content>
  </entry>
  <entry>
    <title>vue2内容</title>
    <url>/2019/10/15/vue/</url>
    <content><![CDATA[<hr>
<h2 id="vue-简介"><a href="#vue-简介" class="headerlink" title="vue 简介"></a>vue 简介</h2><hr>
<p>Vue 是一套用于构建用户界面的 渐进式框架 。</p>
<p>与其它大型框架不同的是，Vue 采用自底向上增量开发的设计。</p>
<p>Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>最初它不过是个人项目，时至今日，已成为全世界三大前端框架之一，github 上拥有 19.8万 Star。 领先于 React 和 Angular，在国内更是首选。<br><img src="http://laoxu.fun/2022/06/30/vue2/image-20220717093650297.png" alt="alt" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>自从Vue 2.0 发布之后，Vue 就成了前端领域的热门话题。</p>
<p>2019.02.05，Vue 发布了 2.6.0 ，这是一个承前启后的版本，在它之后，推出了 3.0.0。</p>
<p>2019.12.05，在万众期待中，尤雨溪公布了 Vue 3 源代码，此时的 Vue 3仍 处于 Alpha 版本。</p>
<p>2020年09月18日，Vue.js 3.0 正式发布。</p>
<hr>
<h2 id="Vue-周边生态"><a href="#Vue-周边生态" class="headerlink" title="Vue 周边生态"></a>Vue 周边生态</h2><hr>
<p>vue-cli：vue 脚手架<br>vue-resource(axios)：ajax 请求<br>vue-router：路由<br>vuex：状态管理（它是 vue 的插件但是没有用 vue-xxx 的命名规则）<br>vue-lazyload：图片懒加载<br>vue-scroller：页面滑动相关<br>mint-ui：基于 vue 的 UI 组件库（移动端）<br>element-ui：基于 vue 的 UI 组件库（PC 端）</p>
<h2 id="原生计数器"><a href="#原生计数器" class="headerlink" title="原生计数器"></a>原生计数器</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 1. 获取DOM原生</span><br><span class="line">const titleEl = document.querySelector(<span class="string">&quot;.title&quot;</span>);</span><br><span class="line">const btnInEl = document.querySelector(<span class="string">&#x27;.increment&#x27;</span>);</span><br><span class="line">const btnDeEl = document.querySelector(<span class="string">&#x27;.decrement&#x27;</span>);</span><br><span class="line">// 2. 默认设置的是Hello World</span><br><span class="line"><span class="built_in">let</span> counter = 0</span><br><span class="line">// 3. 设置titleEl的内容</span><br><span class="line">titleEl.innerHTML = counter;</span><br><span class="line">// 4. 监听按钮的点击</span><br><span class="line">btnInEl.addEventListener(<span class="string">&#x27;click&#x27;</span>,(=&gt;&#123;</span><br><span class="line">    counter += 1;</span><br><span class="line">    titleEl.innerHTML =counter;</span><br><span class="line">&#125;)</span><br><span class="line">btnDeEl.addEventListener(<span class="string">&#x27;click&#x27;</span>,(=&gt;&#123;</span><br><span class="line">    counter -=1;</span><br><span class="line">    titleEl.innerHTML = counter;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="vue写法"><a href="#vue写法" class="headerlink" title="vue写法"></a>vue写法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">     &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">       &lt;!-- vue指令: v-on:事件类型 --&gt;</span><br><span class="line">       &lt;button v-on:click=<span class="string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">       &lt;!-- 简写 比如: @click @keyup @keydown --&gt;</span><br><span class="line">       &lt;button @click=<span class="string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">       &#123;&#123; count &#125;&#125;</span><br><span class="line">       &lt;button v-on:click=<span class="string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">       &lt;button @click=<span class="string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">       // 关闭生产提示</span><br><span class="line">       Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">   </span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">         el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">         // 数据</span><br><span class="line">         data: &#123;</span><br><span class="line">           count: 0</span><br><span class="line">         &#125;,</span><br><span class="line">         // 方法</span><br><span class="line">         methods: &#123;</span><br><span class="line">           <span class="function"><span class="title">increment</span></span>()&#123;</span><br><span class="line">             // this =&gt; vue实例</span><br><span class="line">             this.count++</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="function"><span class="title">decrement</span></span>()&#123;</span><br><span class="line">             this.count--</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &lt;/script&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 属性绑定 v-bind:</span></span><br><span class="line"><span class="comment"># 功能：指定变化的属性值</span></span><br><span class="line"><span class="comment"># 完整写法</span></span><br><span class="line"> v-bind:xxx=<span class="string">&#x27;yyy&#x27;</span>  // yyy会作为表达式解析执行</span><br><span class="line"><span class="comment">#  简洁写法</span></span><br><span class="line"> :xxx=<span class="string">&#x27;yyy&#x27;</span></span><br><span class="line"><span class="comment"># 属性绑定应用</span></span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 数组 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;]&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 数组嵌套三元表达式 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, isactive?&#x27;active&#x27;: &#x27;&#x27;]&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 数组嵌套对象 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, &#123;active: isactive&#125;]&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 直接使用对象 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;&#123;red:true&#125;&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;styles&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&#x27;click&#x27;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">let</span> vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="literal">true</span>,</span><br><span class="line">            info: <span class="string">&#x27;明天就中秋了，你们的中秋节目准备的咋样了？&#x27;</span>,</span><br><span class="line">            isactive: <span class="literal">true</span>,</span><br><span class="line">            index: 1,</span><br><span class="line">            styles: &#123;</span><br><span class="line">                red: <span class="literal">true</span>,</span><br><span class="line">                thin: <span class="literal">true</span>,</span><br><span class="line">                active: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">click</span></span>() &#123;</span><br><span class="line">                console.log(this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单向数据绑定</span></span><br><span class="line"><span class="comment"># 语法：</span></span><br><span class="line">v-bind:href =<span class="string">&quot;xxx&quot;</span> 或简写为 :href =<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 特点：数据只能从 data 流向页面</span></span><br><span class="line"><span class="comment"># 双向数据绑定 指令 v-model</span></span><br><span class="line"><span class="comment"># 语法：</span></span><br><span class="line">v-mode:value=<span class="string">&quot;xxx&quot;</span> 或简写为 v-model=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 特点：数据不仅能从 data 流向页面，还能从页面流向 data</span></span><br><span class="line">v-model应用</span><br><span class="line">v-model:用来辅助开发者在不操作 DOM 的前提下，快速获取表单的数据</span><br><span class="line">&lt;p&gt;选择的省份是: &#123;&#123;province&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;select v-model=<span class="string">&#x27;province&#x27;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;0&quot;</span>&gt;--请选择--&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;1&quot;</span>&gt;上海&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;2&quot;</span>&gt;深圳&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;3&quot;</span>&gt;广州&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;4&quot;</span>&gt;北京&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;5&quot;</span>&gt;杭州&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;您选中的是:&#123;&#123;sex&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> v-model=<span class="string">&#x27;sex&#x27;</span> value=<span class="string">&quot;man&quot;</span>&gt;man</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> v-model=<span class="string">&#x27;sex&#x27;</span> value=<span class="string">&quot;woman&quot;</span>&gt;woman</span><br><span class="line"></span><br><span class="line">&lt;p&gt;您的爱好是: &#123;&#123;loves&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;game&quot;</span> v-model=loves value=<span class="string">&quot;玩游戏&quot;</span>&gt;玩游戏</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;music&quot;</span> v-model=loves value=<span class="string">&quot;听音乐&quot;</span>&gt;听音乐</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;basketball&quot;</span> v-model=loves value=<span class="string">&quot;打篮球&quot;</span>&gt;打篮球</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;eat&quot;</span> v-model=loves value=<span class="string">&quot;吃东西&quot;</span>&gt;吃东西</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;treenp&quot;</span> v-model=loves value=<span class="string">&quot;吹牛皮&quot;</span>&gt;吹牛皮</span><br><span class="line"></span><br><span class="line">.number: 将输入值转化为数字类型</span><br><span class="line">想要严格限制输入框只允许输入数字，请使用属性<span class="built_in">type</span>=<span class="string">&quot;number&quot;</span></span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model.number=<span class="string">&#x27;first&#x27;</span> @keyup=<span class="string">&#x27;sum&#x27;</span>&gt;+</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model.number=<span class="string">&#x27;last&#x27;</span> @keyup=<span class="string">&#x27;sum&#x27;</span>&gt; =</span><br><span class="line">&lt;span&gt;&#123;&#123;result&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">.lazy: 当添加了.lazy修饰符后，双向绑定的数据就不同步了，相当于在input输入框失去焦点后触发的change事件中同步</span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;input v-model.lazy=<span class="string">&quot;msg&quot;</span> @change=<span class="string">&quot;show&quot;</span>&gt;</span><br><span class="line">   &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: 老许</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">show</span></span> () &#123;</span><br><span class="line">      console.log(this.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">.trim 自动去除输入框前后(首尾)空格</span><br><span class="line">如下: 如果直接在开头输入空格，或者是在末尾输入空格，是不会显示有输入内容的</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model.trim=<span class="string">&quot;msg&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v-on:click=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">v-on:keyup=<span class="string">&#x27;xxx(参数)&#x27;</span></span><br><span class="line">v-on:keyup.enter=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">功能：绑定指定事件名的回调函数</span><br><span class="line">简洁写法</span><br><span class="line">@click=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">@keyup=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">@keyup.enter=<span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>
<p>事件修饰符<br>prevent：阻止默认事件（常用）；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent=<span class="string">&quot;onSubmit&quot;</span>&gt;&lt;/form&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> @click.prevent=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>stop：阻止事件冒泡（常用）；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;demo1&quot;</span> @click=<span class="string">&quot;showInfo&quot;</span>&gt;</span><br><span class="line">&lt;button @click.stop=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;!-- 修饰符可以连续写 先写的先起作用: 这样写就是先阻止默认行为后阻止冒泡--&gt;</span><br><span class="line">&lt;!-- &lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> @click.prevent.stop=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/a&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>once：事件只触发一次（常用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="line">&lt;button @click.once=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="指令语法：条件渲染指令"><a href="#指令语法：条件渲染指令" class="headerlink" title="指令语法：条件渲染指令"></a>指令语法：条件渲染指令</h3><p>v-if是控制元素是否加载到页面上（有性能开销）</p>
<p>适用于：切换频率较低的场景。</p>
<p>特点：不展示的DOM元素直接被移除。当条件不成立时, v-if 的所有子节点不会解析</p>
<p>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被 ‘打断’。</p>
<p>v-show是控制元素的显示与隐藏 （初始创建时加载一次）</p>
<p>切换频率较高的场景。<br>不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;p v-if=<span class="string">&#x27;flag&#x27;</span>&gt;海底月是天上月&lt;/p&gt;</span><br><span class="line">&lt;p v-else&gt;眼前人是心上人&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p v-if=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;优秀&lt;/p&gt;</span><br><span class="line">&lt;p v-else-if=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;良好&lt;/p&gt;</span><br><span class="line">&lt;p v-else-if=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;一般&lt;/p&gt;</span><br><span class="line">&lt;p v-else=<span class="string">&quot;type === &#x27;D&#x27;&quot;</span>&gt;差&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p v-show=<span class="string">&#x27;flag&#x27;</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h3><p>v-for指令:</p>
<p>1、用于展示列表数据</p>
<p>2、语法：v-for&#x3D;“(item, index) in xxx” :key&#x3D;“yyy”</p>
<p>3、可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;span&gt;key是唯一的标识 其数据类型只能是字符串或者数字&lt;/span&gt;</span><br><span class="line">  &lt;!-- item代表数组中的每一项 --&gt;</span><br><span class="line">  &lt;!-- 如果需要取下标 (item, index) --&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(item,index) of persons&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">	&#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历对象 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(value,key) of car&quot;</span> :key=<span class="string">&quot;key&quot;</span>&gt;</span><br><span class="line">	&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历字符串 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(char,index) of str&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(number,index) of 5&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<h4 id="key使用注意事项"><a href="#key使用注意事项" class="headerlink" title="key使用注意事项"></a>key使用注意事项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">面试题：react、vue中的key有什么作用？（key的内部原理）</span><br><span class="line"></span><br><span class="line">1. 虚拟DOM中key的作用：</span><br><span class="line">key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </span><br><span class="line">随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="line"></span><br><span class="line">2.对比规则：</span><br><span class="line">(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line">		①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</span><br><span class="line">		②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</span><br><span class="line">(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="line">		创建新的真实DOM，随后渲染到到页面。</span><br><span class="line">		</span><br><span class="line">3. 用index作为key可能会引发的问题：</span><br><span class="line">	1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="line">					会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="line">	2. 如果结构中还包含输入类的DOM：</span><br><span class="line">					会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="line">4. 开发中如何选择key?</span><br><span class="line">	1.最好使用每条数据的唯一标识作为key, 比如<span class="built_in">id</span>、手机号、身份证号、学号等唯一值。</span><br><span class="line">	2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</span><br><span class="line">	使用index作为key是没有问题的。</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;carname&#x27;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&#x27;add&#x27;</span>&gt;添加一辆车&lt;/button&gt;</span><br><span class="line">  &lt;ul v-for=<span class="string">&#x27;(item, index) in list&#x27;</span> :key=<span class="string">&#x27;item.id&#x27;</span>&gt;</span><br><span class="line">  &lt;li&gt;&#123;&#123; item.name &#125;&#125;&lt;input&gt;&lt;/input&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div &gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    carname: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    nextId: 4,</span><br><span class="line">    list: [</span><br><span class="line">    &#123;<span class="built_in">id</span>: 001, name: <span class="string">&#x27;法拉利&#x27;</span> &#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>: 002, name: <span class="string">&#x27;兰博基尼&#x27;</span> &#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>: 003, name: <span class="string">&#x27;布加迪&#x27;</span> &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">add</span></span>() &#123;</span><br><span class="line">      this.list.unshift(&#123;</span><br><span class="line">        <span class="built_in">id</span>: this.nextId,</span><br><span class="line">        name: this.carname</span><br><span class="line">      &#125;)</span><br><span class="line">        this.nextId += 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>​ 定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p>
<p>​ 语法：</p>
<p>​ 1.注册过滤器：Vue.filter (name,callback) 或 new Vue { filters:{} }</p>
<p>​ 2.使用过滤器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&#123; xxx | 过滤器名 &#125;&#125;&#x27;</span> 或 v-bind:属性 = <span class="string">&quot;xxx | 过滤器名&quot;</span></span><br></pre></td></tr></table></figure>
<p>​ 备注：</p>
<p>​ 1.过滤器也可以接收额外参数、多个过滤器也可以串联</p>
<p>​ 2.并没有改变原本的数据, 是产生新的对应的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt; !--准备好一个容器--&gt;</span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;显示格式化后的时间&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 计算属性实现 --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; fmtTime &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- methods实现 --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; getFmtTime() &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 过滤器实现 --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; time | timeFormater&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 过滤器实现（传参） --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; time | timeFormater(<span class="string">&#x27;YYYY_MM_DD&#x27;</span>) | mySlice&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3 :x=<span class="string">&quot;msg | mySlice&quot;</span>&gt;哈哈哈&lt;/h3&gt;</span><br><span class="line">	&lt;/div &gt;</span><br><span class="line"></span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">	&lt;/body &gt;</span><br><span class="line"></span><br><span class="line">  &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">    //全局过滤器</span><br><span class="line">    Vue.filter(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(value)&#123;</span><br><span class="line">		<span class="built_in">return</span> value.slice(0,4)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">    time:1621561377603, //时间戳</span><br><span class="line">    msg:<span class="string">&#x27;你好，vue&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      <span class="function"><span class="title">fmtTime</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> dayjs(this.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">getFmtTime</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> dayjs(this.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    //局部过滤器</span><br><span class="line">    filters:&#123;</span><br><span class="line">      timeFormater(value, str = <span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)&#123;</span><br><span class="line">			// console.log(<span class="string">&#x27;@&#x27;</span>,value)</span><br><span class="line">			<span class="built_in">return</span> dayjs(value).format(str)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#root2&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">      msg:<span class="string">&#x27;hello,vue!&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="computed和method"><a href="#computed和method" class="headerlink" title="computed和method"></a>computed和method</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;firstName&#x27;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;lastName&#x27;</span>&gt;</span><br><span class="line">        &lt;!-- 插值表达式的实现 简单的js逻辑表达式 --&gt;</span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;firstName +<span class="string">&#x27;-&#x27;</span>+ lastName&#125;&#125;&lt;/span&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;firstName&#125;&#125; - &#123;&#123;lastName&#125;&#125; &lt;/span&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 更复杂的通过方法的实现 </span><br><span class="line">        methods中的方法调用一次就会执行一次 如果数据不需要更新</span><br><span class="line">        会造成性能的浪费--&gt;</span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                // 定义到data中的数据默认会被响应式监听</span><br><span class="line">                firstName: <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">                lastName: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                // <span class="function"><span class="title">fullName</span></span>() &#123;</span><br><span class="line">                //     console.log(111);</span><br><span class="line">                //     <span class="built_in">return</span> this.firstName + <span class="string">&#x27;-&#x27;</span> + this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 计算属性computed: 计算属性的值本身不存在 是需要通过计算得到的 </span><br><span class="line">            // 底层也是通过object.defineProperty来实现的</span><br><span class="line">            // computed 与 methods的区别</span><br><span class="line">            // 1、是否存在缓存: methods调用一次执行一次</span><br><span class="line">            // computed第一次调用时会将结果缓存 (有缓存)、后续调用在所依赖的数据不发生变化的前提下 直接返回缓存的结果 =&gt; 复用率高 提升性能</span><br><span class="line">            // 2、调用方式不同: methods使用时，一般情况需要加括号，而computed则不需要</span><br><span class="line">            // 3、绑定方式不同: methods是单向数据绑定 只有getter, computed是双向数据绑定, 有setter和getter </span><br><span class="line"></span><br><span class="line">            // 使用场景</span><br><span class="line">            // 某个属性的值需要来自多个属性的简单计算或者复杂逻辑计算得出的值时, 推荐使用computed属性, 比如购物车的总价计算</span><br><span class="line"></span><br><span class="line">            computed: &#123;</span><br><span class="line">                // 完整写法</span><br><span class="line">                fullName: &#123;</span><br><span class="line">                    // get作用: 当使用到fullName的时候 默认会调用get方法</span><br><span class="line">                    // get特点: </span><br><span class="line">                    // 1、初次使用计算属性的时候会执行</span><br><span class="line">                    // 2、当依赖的响应式数据发生变化的时候会执行</span><br><span class="line">                    <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">                        console.log(111);</span><br><span class="line">                        <span class="built_in">return</span> this.firstName + <span class="string">&#x27;-&#x27;</span> + this.lastName</span><br><span class="line">                    &#125;,</span><br><span class="line">                    // 如果需要修改计算属性 需要提供一个<span class="built_in">set</span>方法</span><br><span class="line">                    // 并且这个<span class="built_in">set</span>方法中要能够引起依赖的数据的变化</span><br><span class="line">                    <span class="built_in">set</span>(val) &#123;</span><br><span class="line">                        <span class="built_in">let</span> arr = val.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                        this.firstName = arr[0]</span><br><span class="line">                        this.lastName = arr[1]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                // 简写</span><br><span class="line">                // <span class="function"><span class="title">fullName</span></span>()&#123;</span><br><span class="line">                //     <span class="built_in">return</span> this.firstName + <span class="string">&#x27;-&#x27;</span> + this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;name&#x27;</span>&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;student.loves.playGame.tencent.name&#x27;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // watch 侦听器允许开发者监视数据的变化，从而针对数据的变化做特定的操作</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                // _data会收集data中的数据 处理成响应式</span><br><span class="line">                // 再将其挂载到vm实例对象下方便开发者使用 =&gt; 数据代理</span><br><span class="line">                // 响应式: 简单的说就是数据发生变化 页面会重新渲染</span><br><span class="line">                // 页面发生变化 数据也会随之变化</span><br><span class="line"></span><br><span class="line">                name: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                message: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                student: &#123;</span><br><span class="line">                    loves: &#123;</span><br><span class="line">                        playGame: &#123;</span><br><span class="line">                            tencent: &#123;</span><br><span class="line">                                name: <span class="string">&#x27;王者荣耀&#x27;</span>,</span><br><span class="line">                                price: 99</span><br><span class="line">                            &#125;,</span><br><span class="line">                            wangyi: &#123;</span><br><span class="line">                                name: <span class="string">&#x27;和平精英&#x27;</span>,</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;,</span><br><span class="line">            watch: &#123;</span><br><span class="line">                // 侦听器本质是一个函数 需要侦听谁 就将侦听的属性当作函数名放到watch中即可</span><br><span class="line">                // 当被监视的属性发生变化时，回调函数自动调用，执行函数中的代码</span><br><span class="line">                // <span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">                //     <span class="keyword">if</span> (this.name == <span class="string">&#x27;&#x27;</span>) <span class="built_in">return</span></span><br><span class="line">                //     const &#123; data &#125; = await axios.get(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + this.name)</span><br><span class="line">                //     this.message = data.message</span><br><span class="line">                // &#125;</span><br><span class="line"></span><br><span class="line">                // 有配置项的情况 将函数改造成对象的形式</span><br><span class="line">                // name: &#123;</span><br><span class="line">                //     async handler(newVal, oldVal) &#123;</span><br><span class="line">                //         console.log(111);</span><br><span class="line">                //         console.log(<span class="string">&#x27;新值&#x27;</span>+ newVal, <span class="string">&#x27;老值&#x27;</span>+ oldVal);</span><br><span class="line">                //         <span class="keyword">if</span> (this.name == <span class="string">&#x27;&#x27;</span>) <span class="built_in">return</span></span><br><span class="line">                //         const &#123; data &#125; = await axios.get(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + this.name)</span><br><span class="line">                //         this.message = data.message</span><br><span class="line">                //     &#125;,</span><br><span class="line">                // 表示页面初次渲染好之后，就立即触发当前的 watch 侦听器</span><br><span class="line">                // 执行handler函数中的内容</span><br><span class="line">                //     immediate: <span class="literal">true</span>,</span><br><span class="line">                // &#125;,</span><br><span class="line">                // 如果层次不深 可以直接通过这种方式侦听</span><br><span class="line">                // <span class="string">&#x27;student.name&#x27;</span>:&#123;&#125;</span><br><span class="line"></span><br><span class="line">                // <span class="string">&#x27;student.loves.playGame.tencent.name&#x27;</span>:&#123;</span><br><span class="line">                //     handler(newVal)&#123;</span><br><span class="line">                //         console.log(11111);</span><br><span class="line">                //         console.log(newVal);</span><br><span class="line">                //     &#125;</span><br><span class="line">                // &#125;</span><br><span class="line">				// vue中的watch默认不监视对象内部的值改变</span><br><span class="line">                student: &#123;</span><br><span class="line">                    handler(newVal) &#123;</span><br><span class="line">                        console.log(11111);</span><br><span class="line">                        console.log(newVal);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    // 开启深度监听</span><br><span class="line">                    // </span><br><span class="line">                    deep: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        vm.<span class="variable">$watch</span>(<span class="string">&#x27;student&#x27;</span>, &#123;</span><br><span class="line">            handler(newVal) &#123;</span><br><span class="line">              console.log(11111);</span><br><span class="line">              console.log(newVal);</span><br><span class="line">            &#125;,</span><br><span class="line">            // 开启深度监听</span><br><span class="line">            deep: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="computed和watch"><a href="#computed和watch" class="headerlink" title="computed和watch"></a>computed和watch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">                lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">                fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            // 侦听器的方式</span><br><span class="line">            watch: &#123;</span><br><span class="line">                firstName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">                    this.fullName = val + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">                &#125;,</span><br><span class="line">                lastName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">                    this.fullName = this.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 计算属性的方式</span><br><span class="line">            computed: &#123;</span><br><span class="line">                <span class="function"><span class="title">fullName</span></span>() &#123;</span><br><span class="line">                    this.fullName = this.firstName + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // computed和watch的区别</span><br><span class="line">            // 1、computed是有缓存的  watch没有</span><br><span class="line">            // 2、computed一般执行同步操作 异步操作在watch中实现</span><br><span class="line">            // 3、computed监听的那个数据的数据发生变化时,不会重新计算,只有依赖的数据发生变化时才会重新调用getter来计算</span><br><span class="line">            // watch监听的数据发生变化时 立马执行相应的回调函数重新计算</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><p>什么是数据代理？</p>
<p>通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> obj1 = &#123; x: 100 &#125;</span><br><span class="line"><span class="built_in">let</span> obj2 = &#123; y: 200 &#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">	<span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> obj1.x</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="built_in">set</span>(value) &#123;</span><br><span class="line">		obj1.x = value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">此时操作obj2实际上在操作obj1</span><br></pre></td></tr></table></figure>
<p>vue中的数据代理</p>
<p>vue里面data的数据代理 通过_data收集data中的数据</p>
<p>利用Object.defineProperty中的get和set将data中的每个数据进行数据代理</p>
<p>再将代理好的数据挂载到vm实例上</p>
<p>好处: 方便开发者操作data中的数据</p>
<h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set()"></a>Vue.set()</h3><p>注意：受现代 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的</p>
<p>如果在实例创建之后添加新的属性到实例上，它不会触发视图更新</p>
<p>如果想要数据是响应式的并且能触发视图更新 使用Vue.set()</p>
<p>(比如 this.myObject.newProperty &#x3D; ‘hi’)</p>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">自定义指令总结：</span><br><span class="line">一、定义语法：</span><br><span class="line">(1).局部指令：</span><br><span class="line">new Vue(&#123; new Vue(&#123;</span><br><span class="line">directives:&#123;指令名:配置对象&#125; 或 directives&#123;指令名:回调函数&#125;</span><br><span class="line">&#125;) &#125;)</span><br><span class="line">(2).全局指令：</span><br><span class="line">Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</span><br><span class="line"></span><br><span class="line">二、配置对象中常用的3个回调：</span><br><span class="line">(1).<span class="built_in">bind</span>：指令与元素成功绑定时调用。</span><br><span class="line">(2).inserted：指令所在元素被插入页面时调用。</span><br><span class="line">(3).update：指令所在模板结构被重新解析时调用。</span><br><span class="line"></span><br><span class="line">三、备注：</span><br><span class="line">1.指令定义时不加v-，但使用时要加v-；</span><br><span class="line">2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-focus&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    自定义指令: &lt;p v-two-double.flag=<span class="string">&quot;number&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;number += 1&quot;</span>&gt;++&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;age += 1&quot;</span>&gt;++&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    自动聚焦: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-focus v-if=<span class="string">&quot;flag&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;del&quot;</span>&gt;移除元素&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // ctrl+<span class="built_in">shift</span>+k 删除当前行</span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    // 1、自定义指令什么时候会被执行 ?</span><br><span class="line">    // - 指令与页面元素绑定成功时(页面一打开)</span><br><span class="line">    // - 自定义指令所在的vue模板被重新解析时</span><br><span class="line"></span><br><span class="line">    // 函数式写法</span><br><span class="line">    Vue.directive(<span class="string">&#x27;two-double&#x27;</span>, (el, binding) =&gt; &#123;</span><br><span class="line">      el.innerText = binding.value * 2</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // Vue.directive(<span class="string">&#x27;focus&#x27;</span>, (el, binding) =&gt; &#123;</span><br><span class="line">    //   // 聚焦失败 原因是此时元素并没有渲染到页面上</span><br><span class="line">    //   el.focus()</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 对象式写法</span><br><span class="line">    Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">      // 指令与元素成功绑定时调用</span><br><span class="line">      <span class="built_in">bind</span>(el,binding)&#123;</span><br><span class="line">        el.style.backgroundColor = <span class="string">&#x27;skyblue&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      // 指令所在元素被插入页面时调用</span><br><span class="line">      inserted(el,binding)&#123;</span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;,</span><br><span class="line">      // 指令所在模板结构被重新解析时调用</span><br><span class="line">      update(el,binding) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;update&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">unbind</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">&#x27;unbind&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        number: 1,</span><br><span class="line">        age: 1,</span><br><span class="line">        flag: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">del</span></span>()&#123;</span><br><span class="line">          this.flag = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 局部自定义指令</span><br><span class="line">      // directives: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h3><h3 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h3><p>模块化</p>
<p>站在代码逻辑的角度来划分 解决js依赖等问题 方便分层开发 保证每个模块职能单一</p>
<p>组件化</p>
<p>站在UI界面的角度来划分 方便将来UI组件的复用</p>
<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>第一种注册方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 在页面中使用组件 --&gt;</span><br><span class="line">        &lt;my-com&gt;&lt;/my-com&gt;</span><br><span class="line">        &lt;my-com&gt;&lt;/my-com&gt;</span><br><span class="line">        &lt;my-com&gt;&lt;/my-com&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 关闭生产环境下的vue提示</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        // 使用组件三步骤</span><br><span class="line">        // 1、通过Vue.extend(options)定义组件</span><br><span class="line">        // 2、通过Vue.component(&#x27;组件名&#x27;, 定义好的组件)注册全局组件</span><br><span class="line">        // 3、在页面结构中通过&lt;组件名&gt;&lt;/组件名&gt;使用组件</span><br><span class="line"></span><br><span class="line">        // 注意事项</span><br><span class="line">        // 1、template有且只能有一个根元素</span><br><span class="line">        // 2、不要写el属性 定义的组件都要交给vm管理 由vm中的el来决定服务于哪个容器</span><br><span class="line">        // 3、如果自定义组件名使用了驼峰命名法(myCom) 在页面中使用的时候要用-分割组件名并且转为小写(my-com)</span><br><span class="line">        // 4、组件名不要使用已有的元素名称，比如：div、span都不行。</span><br><span class="line">        // 5、组件中的data必须定义为一个函数 函数中必须返回一个对象 避免组件在复用时 数据直接相互引用导致冲突问题</span><br><span class="line">        // 6、不用使用脚手架时，单标签会导致复用组件后续无法渲染的问题</span><br><span class="line">        // 7、组件中的this指向的是当前组件的实例对象</span><br><span class="line">        // 8、使用name配置项指定组件在开发者工具中呈现的名字</span><br><span class="line"></span><br><span class="line">        // 第一种注册方式 Vue.extend + Vue.component 结合</span><br><span class="line">        // 定义组件</span><br><span class="line">        let mycom = Vue.extend(&#123;</span><br><span class="line">            // el: &#x27;#app&#x27;, 违背设计组件的初心</span><br><span class="line">            // template: 将来展示在页面上的结构</span><br><span class="line">            // name: &#x27;qwer&#x27;, 使用name配置项指定组件在开发者工具中呈现的名字</span><br><span class="line">            template: `&lt;div&gt;</span><br><span class="line">                        &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">                        &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span><br><span class="line">                       &lt;/div&gt;`,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;hello component&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                show()&#123;</span><br><span class="line">                    // this指向的是当前组件的实例对象</span><br><span class="line">                    console.log(this);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        // 注册全局组件</span><br><span class="line">        Vue.component(&#x27;my-com&#x27;, mycom)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>第二种注册方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- .vue文件中也是通过这种方式定义页面结构 --&gt;</span><br><span class="line">    &lt;!-- template模板 只会将template中的内容渲染到页面上 不会将template标签渲染到页面上 --&gt;</span><br><span class="line">    &lt;template id=&quot;mycom1&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;第三种注册方式&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 第二种注册方式 =&gt; template没有提示</span><br><span class="line">        // Vue.component(&#x27;mycom1&#x27;, Vue.extend(&#123;</span><br><span class="line">        //     template: &#x27;&lt;h1&gt;第二种注册方式&lt;/h1&gt;&#x27;,</span><br><span class="line">        // &#125;))</span><br><span class="line"></span><br><span class="line">        // 简写 Vue.component(&#x27;组件名&#x27;, 配置对象) 内部会帮我们调用Vue.extend</span><br><span class="line">        // Vue.component(&#x27;mycom1&#x27;, &#123;</span><br><span class="line">        //     template: &#x27;&lt;h1&gt;第二种注册方式&lt;/h1&gt;&#x27;,</span><br><span class="line">        // &#125;)</span><br><span class="line"></span><br><span class="line">        // 第三种注册方式</span><br><span class="line">        Vue.component(&#x27;mycom1&#x27;, &#123;</span><br><span class="line">            template: &#x27;#mycom1&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="组件data详解"><a href="#组件data详解" class="headerlink" title="组件data详解"></a>组件data详解</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">        &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">        &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 定义一个名为 button-counter 的新组件</span><br><span class="line">        Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    count: 0</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // 为什么data必须是一个函数且返回一个对象</span><br><span class="line">        // 如果是对象的话多个页面可能会复用这个组件 如果其中一个页面对组件data进行修改的话 其它页面的data也会发生变化 造成数据冲突 (引用问题)</span><br><span class="line">        // 而定义成一个函数 每次返回一个新的对象 保证了对象的唯一性 避免了组件数据修改影响其他组件数据</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // var obj = &#123;x:100, y:100&#125;</span><br><span class="line">        // var obj2 = obj</span><br><span class="line">        // obj2.x = 1000</span><br><span class="line">        // console.log(obj); // &#123;x:1000, y:100&#125;</span><br><span class="line"></span><br><span class="line">        // ===================================</span><br><span class="line">        // function getObj()&#123;</span><br><span class="line">        //     return &#123;x: 100, y:100&#125;</span><br><span class="line">        // &#125;  </span><br><span class="line">        // var obj = getObj()</span><br><span class="line">        // var obj2 = getObj() </span><br><span class="line">        // obj2.x = 1000</span><br><span class="line">        // console.log(obj); // &#123;x:100, y:100&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 容器 --&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;mycom&gt;&lt;/mycom&gt;</span><br><span class="line">        &lt;mycom2&gt;&lt;/mycom2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 模板 --&gt;</span><br><span class="line">    &lt;template id=&quot;tmpl&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let mycom = Vue.extend(&#123;</span><br><span class="line">            template: &#x27;#tmpl&#x27;,</span><br><span class="line">            data()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;局部组件注册&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        let mycom2 = Vue.extend(&#123;</span><br><span class="line">            template: &#x27;#tmpl&#x27;,</span><br><span class="line">            data()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;局部组件注册222&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;&#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                mycom,</span><br><span class="line">                mycom2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="嵌套组件"><a href="#嵌套组件" class="headerlink" title="嵌套组件"></a>嵌套组件</h5> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- &lt;app&gt;&lt;/app&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id=&quot;bwm&quot;&gt;</span><br><span class="line">        &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id=&quot;car&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;bwm&gt;&lt;/bwm&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id=&quot;app2&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;car&gt;&lt;/car&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        // 宝马组件</span><br><span class="line">        let bwm = Vue.extend(&#123;</span><br><span class="line">            template: &#x27;#bwm&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;宝马最新款x7只需要100w&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                show() &#123;</span><br><span class="line">                    console.log(&#x27;仅仅100w 心动不如行动&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // 车组件</span><br><span class="line">        let car = Vue.extend(&#123;</span><br><span class="line">            template: &#x27;#car&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;男人必须有一辆爱车~&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                show() &#123;</span><br><span class="line">                    console.log(&#x27;比如说劳斯莱斯&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                bwm</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // App组件</span><br><span class="line">        let App = Vue.extend(&#123;</span><br><span class="line">            template: &#x27;#app2&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;app2&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                show() &#123;</span><br><span class="line">                    console.log(&#x27;app2&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                car</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            template: &#x27;&lt;App&gt;&lt;/App&gt;&#x27;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                App</span><br><span class="line">            &#125;,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(创建前): 在实例初始化之后，数据代理和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods, data等上的方法和数据，这个钩子一般不会做太多功能，会初始化自己的生命周期，事件方法如：$on $emit</span><br><span class="line"></span><br><span class="line"><span class="title function_">created</span>(创建完成): 此时已经完成了数据响应式监听和数据代理，可以获取数据和调用方法 但是<span class="variable constant_">DOM</span>未渲染 在这个周期里面，可以去发送请求, 因为请求是异步的，不会阻碍实例加载，除非是那些同步操走才会导致页面空白。站在这个角度说来，在这个周期里面进行请求，渲染速度反而会更快。</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeMount</span>(挂载前): 检测有没有template属性 有的话会把template渲染成一个render函数，开始解析模板，生成虚拟dom，没有则将外部的html作为模板进行解析。此时数据虽然初始化完成，<span class="variable constant_">DOM</span>未完成挂载，页面还不能显示解析好的内容，数据的双向绑定还是显示&#123;&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">上下两者中间还有一个创建vm.<span class="property">$el</span>保存真实dom的过程，将来虚拟dom对比发现可复用的元素，就从该属性身上取出来渲染 同学们切记 !!!</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(挂载完成): 数据和真实<span class="variable constant_">DOM</span>都完成挂载，这个周期适合执行初始化需要操作<span class="variable constant_">DOM</span>的方法。至此初始化操作完成，一般在此进行：开启定时器，发送网络请求，订阅消息，绑定自定义事件等初始化操作</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeUpdate</span>(更新前): 只要是页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，页面和数据没有同步，当你请求赋值一个数据的时候会执行这个周期，如果没有数据改变不执行。</span><br><span class="line"></span><br><span class="line">中间还有个虚拟<span class="variable constant_">DOM</span>对比的过程，根据新数据，生成新的虚拟<span class="variable constant_">DOM</span>，随后与旧的虚拟<span class="variable constant_">DOM</span>进行比较，最终完成页面更新，如果真实<span class="variable constant_">DOM</span>可以复用 则从vm.<span class="property">$el</span>中取出对应的真实<span class="variable constant_">DOM</span>直接渲染 即:完成了<span class="title class_">Model</span> =&gt; <span class="title class_">View</span>的更新，同学们切记 !!!</span><br><span class="line"></span><br><span class="line"><span class="title function_">updated</span>(更新完成): 只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的。beforeUpdate和updated要谨慎使用，因为页面更新数据的时候都会触发，在这里操作数据很影响性能和容易死循环。此时页面和数据保持同步</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeDestroy</span>(销毁前): 这个周期是在组件销毁之前执行，此时: vm中所有的: data、methods、指令等等，都处于可用状态，马上要执行销毁过程，一般在此阶段:关闭定时器、取消订阅消息、解绑自定义事件等收尾操作</span><br><span class="line"></span><br><span class="line"><span class="title function_">destroyed</span>(销毁完成): 在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，自定义事件会被移除</span><br></pre></td></tr></table></figure>
<h3 id="vue-动画"><a href="#vue-动画" class="headerlink" title="vue 动画"></a>vue 动画</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        /* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 */</span><br><span class="line">        /* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 */</span><br><span class="line">        .v-enter,</span><br><span class="line">        .v-leave-to &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateX(150px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* v-enter-active 【入场动画的时间段】 */</span><br><span class="line">        /* v-leave-active 【离场动画的时间段】 */</span><br><span class="line">        .v-enter-active,</span><br><span class="line">        .v-leave-active &#123;</span><br><span class="line">            transition: all .5s ease</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .my-enter,</span><br><span class="line">        .my-leave-to &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateY(150px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .my-enter-active,</span><br><span class="line">        .my-leave-active &#123;</span><br><span class="line">            transition: all .5s cubic-bezier(0, 1.95, .89, .38)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button @click=&#x27;flag = !flag&#x27;&gt;Toggle&lt;/button&gt;</span><br><span class="line">        &lt;!-- 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --&gt;</span><br><span class="line">        &lt;transition&gt;</span><br><span class="line">            &lt;h3 v-if=&#x27;flag&#x27;&gt;有些同学的心已经到家了&lt;/h3&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;!-- 对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 &lt;transition&gt;，则 v- 是这些类名的默认前缀。</span><br><span class="line">        如果需要自定义类名 可以通过name属性: name=&#x27;my&#x27;  .my-enter --&gt;</span><br><span class="line">        &lt;transition name=&#x27;my&#x27;&gt;</span><br><span class="line">            &lt;h3 v-if=&#x27;flag&#x27;&gt;有些同学的心已经到家了&lt;/h3&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    flag: false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="vue2响应式原理"><a href="#vue2响应式原理" class="headerlink" title="vue2响应式原理"></a>vue2响应式原理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x 双向数据绑定原理是通过Objcet.defineProperty来实现的</span></span><br><span class="line"><span class="comment">// 这种方式有缺点: 数组的长度 数组的内容发生变化检测不到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">phone</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;iphone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let obj = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 视图更新的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视图更新了 ~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>]</span><br><span class="line"><span class="comment">// 将数组的原型保存一份</span></span><br><span class="line"><span class="keyword">let</span> arrProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 创建原型 将数组原型拷贝一份</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrProto)</span><br><span class="line"><span class="comment">// 重写数组的方法</span></span><br><span class="line">methods.<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  proto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// AOP 面向切面编程</span></span><br><span class="line">    <span class="comment">// 改变了数组的数据</span></span><br><span class="line">    arrProto[method].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 重新渲染视图</span></span><br><span class="line">    <span class="title function_">render</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断一个对象是不是数组</span></span><br><span class="line">  <span class="comment">// if(Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27;)&#123;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="comment">// 让观测的对象的原型和我们自己重写的原型建立关系</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = proto</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果观察的是一个对象的话 对其属性进行响应式监听(set、get)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 取出对象中的每一个键和值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 调用响应式处理函数</span></span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, key, obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察obj对象</span></span><br><span class="line"><span class="title function_">observe</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式处理</span></span><br><span class="line"><span class="comment">// Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测对象的属性值是否还是对象</span></span><br><span class="line">  <span class="title function_">observe</span>(val)</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测设置的值是不是对象</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal)</span><br><span class="line">      <span class="comment">// 新值和旧值不相等的时候</span></span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 覆盖掉原来的val值</span></span><br><span class="line">        val = newVal</span><br><span class="line">        <span class="comment">// 通知render函数重新渲染视图</span></span><br><span class="line">        <span class="title function_">render</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// obj.age = 20</span></span><br><span class="line"><span class="comment">// console.log(obj.name, obj.age);</span></span><br><span class="line"><span class="comment">// 至此 基本可以实现数据发生变化 视图更新的效果</span></span><br><span class="line"><span class="comment">// 但是 如果数据有多层呢 也就是属性对应的值也是对象?</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;huawei&#x27;</span></span><br><span class="line"><span class="comment">// console.log(obj.phone.name);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改的值和原来的值一样 不需要重新渲染视图</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;iphone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果重新为对象obj的phone赋值一个新的对象呢? 视图要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone = &#123;name: &#x27;huawei&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且当修改新的对象的属性值时 视图也要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为对象新增属性值呢? 也是没有办法监测到的</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;man&#x27;</span></span><br><span class="line"><span class="comment">// $set来解决这个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$myset</span>(<span class="params">obj, key, val</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj))&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">splice</span>(key, val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">defineReactive</span>(obj, key, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $myset(obj, &#x27;sex&#x27;, &#x27;man&#x27;)</span></span><br><span class="line"><span class="comment">// 修改新增的属性值 视图也能更新</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;woman&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = Object.assign(obj.phone, &#123;price: &#x27;666&#x27;&#125;)</span></span><br><span class="line"><span class="comment">// obj.phone.price = 888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = &#123;...obj.phone, ...&#123;price: &#x27;666&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// obj.phone.price = &#x27;888&#x27;</span></span><br><span class="line"><span class="comment">// 以后vue涉及到给data中的对象新增属性时 有三种方式</span></span><br><span class="line"><span class="comment">// 1、this.$set() || Vue.set()</span></span><br><span class="line"><span class="comment">// 2、obj = Object.assign(原对象, 新对象(新增的属性:值))</span></span><br><span class="line"><span class="comment">// 2、obj = &#123;...原对象, ...新对象(新增的属性:值)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 数组 ======================</span></span><br><span class="line"><span class="comment">// 数组的响应式数据处理依赖的并不是Object.defineProperty 而是对数组的能够引起数据变化的方法进行重写</span></span><br><span class="line"><span class="comment">// obj.push(6)</span></span><br><span class="line"><span class="comment">// obj.length ++ </span></span><br><span class="line"><span class="comment">// obj[0] = 88</span></span><br><span class="line"><span class="comment">// $myset(obj, &#x27;0&#x27;, 66)</span></span><br></pre></td></tr></table></figure>
<h3 id="props-父传子"><a href="#props-父传子" class="headerlink" title="props (父传子)"></a>props (父传子)</h3><p>父组件要正向地向子组件传递数据或参数，子组件收到后，根据传递过来的数据不同，渲染不同的页面内容，或者执行操作。<br>这个正向传递数据的过程是通过props来实现的。子组件使用props来声明需要从父组件接受的数据。</p>
<p>注意:<br>1、所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。<br>2、每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>
<p>两种常见的试图变更一个 prop 的情形<br>1、这个 prop 用来传递一个初始值 这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值<br>2、这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性</p>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p>作用: 在下次 DOM 更新循环结束之后执行其指定的回调。<br>应用场景:<br>1、在修改数据之后，要基于更新后的新dom进行某些操作时，可以立即使用这个方法，获取更新后的 DOM。<br>2、在created中需要操作dom，此时dom并没有加载完毕</p>
<p>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。<br>Vue 是异步执行 DOM 更新的，简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。</p>
<h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>mixin<br>Vue.mixin给我们提供了一种混入Vue实例的方法，创建了混入对象之后，我们自定义的方法或者变量可以很轻松的挂载在Vue实例上，给我们带来方便</p>
<p>Vue.mixin为我们提供了两种混入方式：局部混入和全局混入<br>局部混入：<br>顾名思义就是部分混入，也就是只有引入了mixin的混入对象才可以使用，并且只有在引入了mixin混入对象的组件中才生效</p>
<p>全局混入：<br>全局混入我们只需要把mixin.js引入到main.js中，然后将mixin放入到Vue.mixin()方法中即可；<br>全局混入更为便捷，我们将不用在子组件声明，全局混入将会影响每一个组件的实例，使用的时候需要小心谨慎；这样全局混入之后，我们可以直接在组件中通过this.变量&#x2F;方法来调用mixin混入对象的变量&#x2F;方法；</p>
<p>mixin可以定义公用的变量或方法，但是mixin中的数据是不共享的，也就是每个组件中的mixin实例都是不一样的，都是单独存在的个体，不存在相互影响的；</p>
<h4 id="mixin合并策略"><a href="#mixin合并策略" class="headerlink" title="mixin合并策略"></a>mixin合并策略</h4><p>1、data<br>mixins中的data会合并到data中，有冲突的话，data中数据覆盖mixins中的数据。</p>
<p>2、methods、components 和 directives<br>methods、components 和 directives会执行，但有冲突时，组件中的methods、components 和 directives会覆盖 mixins 中的methods、components 和 directives。</p>
<p>3、特殊的钩子函数（生命周期）</p>
<p>组件和mixin的生命周期都要执行，但是mixin的生命周期优先于组件生命周期执行<br>mixin beforeCreate -&gt; component beforeCreate -&gt; mixin created -&gt; component created</p>
<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>什么是动态组件？</p>
<p>动态组件指的是动态切换组件的显示与隐藏</p>
<h4 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>vue提供了一个内置的组件，专门用来实现动态组件的渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;comName=&#x27;MyLeft&#x27;&quot;</span>&gt;显示<span class="title class_">Left</span>组件&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName=&#x27;MyRight&#x27;&quot;</span>&gt;</span>显示Right组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyLeft</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyRight</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件的交互</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">comName</span>: <span class="string">&#x27;MyLeft&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyLeft</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyRight</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;left组件被创建了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;left组件被销毁了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被缓存了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被激活了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="devServer代理跨域"><a href="#devServer代理跨域" class="headerlink" title="devServer代理跨域"></a>devServer代理跨域</h3><p>  vue.config.js配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&quot;@&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>))</span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&quot;assets&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;src/assets&quot;</span>))</span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&quot;components&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;src/components&quot;</span>))</span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&quot;base&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;baseConfig&quot;</span>))</span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&quot;public&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;public&quot;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pages</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: &#123;</span><br><span class="line">            <span class="comment">// page 的入口</span></span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;src/index.js&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 关闭eslint语法校验</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">// 代理的方式配置跨域</span></span><br><span class="line">        <span class="comment">// 缺点: </span></span><br><span class="line">        <span class="comment">// 1、会先从本地public下查找有没有对应接口的文件 如果有 先返回本地的文件数据 没有再去发起请求访问服务器的数据 (优先匹配前端资源)</span></span><br><span class="line">        <span class="comment">// 2、没法配置多个代理</span></span><br><span class="line">        <span class="comment">// proxy: &#x27;http://localhost:3000/&#x27;,</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 正则匹配所有以&#x27;/api&#x27;开头的请求路径</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// http://localhost:8080/api/teachers</span></span><br><span class="line">                <span class="comment">// http://localhost:3000/teachers</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// target: 代理目标的基础路径</span></span><br><span class="line">                <span class="comment">// http://localhost:8080/teachers</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">                <span class="comment">// 路径重写</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// ws：websocket</span></span><br><span class="line">                <span class="comment">// ws: true,</span></span><br><span class="line">                <span class="comment">// 改变源, 也就是控制host</span></span><br><span class="line">                <span class="comment">// changeOrigin: true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;/v1&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// target: 代理目标的基础路径</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3001&#x27;</span>,</span><br><span class="line">                <span class="comment">// 路径重写</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/v1&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p>vue 的一个插件库，是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目 中组件的切换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">基本使用</span><br><span class="line">安装vue-router，命令：npm i vue-router@<span class="number">3</span></span><br><span class="line">引入插件: <span class="keyword">import</span> <span class="title class_">VueRouter</span> form <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">应用插件：<span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line">编写router配置项：</span><br><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//使用vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">//引入路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">	<span class="attr">routes</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"><span class="comment">//main.js中引入挂载router</span></span><br></pre></td></tr></table></figure>
<h4 id="实现切换（active-class可配置高亮样式）"><a href="#实现切换（active-class可配置高亮样式）" class="headerlink" title="实现切换（active-class可配置高亮样式）"></a>实现切换（active-class可配置高亮样式）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<h4 id="指定展示位置"><a href="#指定展示位置" class="headerlink" title="指定展示位置"></a>指定展示位置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>
<h4 id="路由注意点"><a href="#路由注意点" class="headerlink" title="路由注意点"></a>路由注意点</h4><p>路由组件通常存放在pages或者view文件夹，一般组件(可复用)通常存放在components文件夹。</p>
<p>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载（keep-alive）。</p>
<p>每个组件都有自己的$route属性，里面存储着自己的路由信息。</p>
<p>整个应用只有一个router，可以通过组件的$router属性获取到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router : 是路由操作对象，只写对象</span><br><span class="line">route : 路由信息对象，只读对象</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作 路由跳转</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;word&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>:<span class="string">&#x27;11&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 路由参数接收</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="property">age</span>;</span><br></pre></td></tr></table></figure>
<h4 id="嵌套路由（多级路由）"><a href="#嵌套路由（多级路由）" class="headerlink" title="嵌套路由（多级路由）"></a>嵌套路由（多级路由）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">		<span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">		<span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">		<span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">				<span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line">				<span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">			&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                <span class="comment">// 路由懒加载写法</span></span><br><span class="line">                <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="comment">/*webpackChunkName*:&#x27;user&#x27;/, User)</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">		]</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">]</span></span><br></pre></td></tr></table></figure>
<h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>懒加载简单来说就是延迟加载或按需加载，就是用到的时候再进行加载。</p>
<p>作用: 首屏组件加载速度更快一些，解决白屏问题；更好的客户体验；也是性能优化的一种方式；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="comment">// 首屏没有做路由懒加载</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/center&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    <span class="comment">// 路由懒加载: 懒加载简单来说就是延迟加载或按需加载，就是用到的时候再进行加载。</span></span><br><span class="line">    <span class="comment">// 作用: 首屏组件加载速度更快一些，解决白屏问题；更好的客户体验；</span></span><br><span class="line">    <span class="comment">// 也是性能优化的一种方式；</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;center&quot; */</span> <span class="string">&#x27;../views/Center.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/Search.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail?id=666&amp;title=你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">				</span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		path:&#x27;/home/message/detail&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		   id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">	&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">接收参数</span><br><span class="line"></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure>
<h4 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h4><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。 在 vue-router 中使用英文的冒号（:）来定义路由的参数项</p>
<p>配置路由，声明接收params参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">	<span class="attr">children</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">			<span class="attr">children</span>:[</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">					<span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">					<span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传递参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail/666/你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">				</span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		params:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		   id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">	&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>接收参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>用：对路由进行权限控制</p>
<p>分类：全局守卫、独享守卫、组件内守卫</p>
<h4 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>) === <span class="string">&#x27;admin&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">			<span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">			<span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line">		<span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="独享守卫"><a href="#独享守卫" class="headerlink" title="独享守卫:"></a>独享守卫:</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>) === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">			<span class="title function_">next</span>()</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">			<span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">next</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="组件内守卫："><a href="#组件内守卫：" class="headerlink" title="组件内守卫："></a>组件内守卫：</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h3><p> 对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。<br>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。<br>hash模式：<br>地址中永远带着#号，不美观 。<br>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。<br>兼容性较好。<br>history模式：<br>地址干净，美观 。<br>兼容性和hash模式相比略差。底层是h5 api history对象<br>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。可以安装connect-history-api-fallback插件解决</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>什么是vuex？<br>vue中实现集中式状态（数据）管理的vue插件（vue.use(vuex)），对vue应用中多个组件的共享状态进行集中式管理（读&#x2F;写），是一种任意组件之间通信的方式，适用于较大型项目</p>
<p>使用场景？<br>1、多个视图依赖于同一状态</p>
<p>2、来自不同视图的行为需要变更同一状态<br><img src="http://laoxu.fun/2022/06/30/vue2/image-20220814212828028.png" alt="alt" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="Vuex的工作流程"><a href="#Vuex的工作流程" class="headerlink" title="Vuex的工作流程"></a>Vuex的工作流程</h4><p>一、安装vuex npm i vuex@3</p>
<p>二、引入Vue，引入VueX，Vue.use(VueX)</p>
<p>三、在项目创建store文件夹，及index.js<br>定义相关的vuex的state，getters，actions，mutations，</p>
<p>并创建vuex实例：const sotre &#x3D; new Vue.Store({state，getters，actions，mutations})</p>
<p>四、在入口文件main.js中引入store,并在根实例注册挂载</p>
<p>五、在任意组件中，通过this.$store.state就可以访问到共享数据</p>
<p>六、当通过组件要修改store中的数据时，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果该操作是同步的并且不需要共用，可以用<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>()来触发mutations, 只有mutations才可以直接更改state共享数据</span><br><span class="line"><span class="number">2.</span> mutations中只能有同步操作，不能有异步操作</span><br><span class="line"><span class="number">3.</span> 如果修改数据的操作是异步的，通过<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>()触发actions, actions中可以发起异步请求，获取数据后，再调用 commit触发mutations,通过mutations修改共享数据</span><br></pre></td></tr></table></figure>
<h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>mapState<br>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品名称: &#123;&#123;goodName&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品价格: &#123;&#123;goodPrice&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品描述: &#123;&#123;goodDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品最新描述: &#123;&#123;goodNewDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入辅助函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// mapState: 映射状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">n</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 封装思路</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// function mapState(obj)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 需要取出对象的键值对</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// for(let key in obj)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return function [key]()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     return this.$store.state[obj[key]]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// mapState(&#123;name: &#x27;goodName&#x27;, price: &#x27;goodPrice&#x27;&#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 手写计算属性 + state</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// name() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// price() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodPrice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// desc() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 生成计算属性 =&gt; 对象的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 传入的对象键为: 生成的计算属性名字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 传入的对象值为: 需要访问state中的哪个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapState(&#123; name: &#x27;goodName&#x27;, price: &#x27;goodPrice&#x27;, desc: &#x27;goodDesc&#x27; &#125;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// goodName() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// goodPrice() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodPrice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// goodDesc() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 当计算属性的名字和需要访问state的属性名字一样时 可以使用数组的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;goodName&#x27;</span>, <span class="string">&#x27;goodPrice&#x27;</span>, <span class="string">&#x27;goodDesc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回值是一个对象  &#123;name:function&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="title function_">mapState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;goodName&#x27;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>mapGetters</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品名称: &#123;&#123;goodName&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品价格: &#123;&#123;goodPrice&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品描述: &#123;&#123;goodDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品最新描述: &#123;&#123;goodNewDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入辅助函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// mapState: 映射状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">n</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 手写的计算属性 + getter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// newDesc()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.goodNewDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// newDesc()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.goodNewDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// newDesc()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.goodNewDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 利用辅助函数生成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 对象写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapGetters(&#123;newDesc: &#x27;goodNewDesc&#x27;&#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数组写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodNewDesc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回值是一个对象  &#123;name:function&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="title function_">mapGetters</span>(&#123; <span class="attr">newDesc</span>: <span class="string">&#x27;goodNewDesc&#x27;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>mapMutations</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品名称: &#123;&#123;goodName&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品价格: &#123;&#123;goodPrice&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品描述: &#123;&#123;goodDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品最新描述: &#123;&#123;goodNewDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要涨价的金额&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;money&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;increase(money)&#x27;</span>&gt;</span>涨价<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;increaseDouble(money)&#x27;</span>&gt;</span>翻倍的涨价<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入辅助函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// mapState: 映射状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">money</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// increase()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   this.$store.commit(&#x27;INCREASE&#x27;, this.money)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 没有手动传参会将$event事件参数对象当作第二个参数传过去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// increase(e)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   this.$store.commit(&#x27;INCREASE&#x27;, e)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 手动传参就使用我们的参数当作第二个参数传过去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// increase(money)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   this.$store.commit(&#x27;INCREASE&#x27;, money)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 对象的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapMutations(&#123; increase: &#x27;INCREASE&#x27; &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数组的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;increase&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;goodName&#x27;</span>, <span class="string">&#x27;goodPrice&#x27;</span>, <span class="string">&#x27;goodDesc&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodNewDesc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回值是一个对象  &#123;name:function&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="title function_">mapState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;goodName&#x27;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>mapActions</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// increaseDouble()&#123;</span></span><br><span class="line"><span class="comment">//   // 逻辑稍微复杂且需要共用 dispatch</span></span><br><span class="line"><span class="comment">//   this.$store.dispatch(&#x27;increaseDouble&#x27;, this.money)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// ...mapActions(&#123;increaseDouble: &#x27;increaseDouble&#x27;&#125;)</span></span><br><span class="line">...<span class="title function_">mapActions</span>([<span class="string">&#x27;increaseDouble&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>在VUE项目中，由于是单页应用，vuex中的数据在页面刷新时就会被清除，所以我们要考虑怎样让vuex中的数据持久保存在浏览器中，至少不能每次刷新时都丢失登录状态，这篇文章介绍VUE项目中常用到的两种vuex持久化的方法，底层实现原理一直，方法不太一样，可以在项目中根据实际来区分<br>方法一、浏览器监听+本地存储<br>我们可以监听浏览器的刷新，在页面刷新时将vuex内的数据保存在本地存储中(根据项目需要可以考虑保存在sessionStorage或者localStorage中)<br>在App.vue中，created生命周期写我们的监听方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;store&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后在进入到created生命周期时，去到sessionStorage&#x2F;localStorage中的数据，将数据替换</p>
<p>到vuex中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;store&quot;</span>)) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">replaceState</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;store&#x27;</span>))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二、状态持久化插件<br>推荐使用 vuex-persistedstate 插件<br>使用方法如下<br>1、在项目中安装该插件 cnpm i –save vuex-persistedstate<br>2、在 src&#x2F;store&#x2F;index.js中引入该插件 import createPersistedState from ‘vuex-persistedstate’<br>在vuex中使用 plugins: [createPersistedState()]<br>整体代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">    <span class="attr">storage</span>: <span class="variable language_">window</span>.<span class="property">sessionStorage</span>, <span class="comment">// 默认位置是 localStorage</span></span><br><span class="line">    <span class="attr">reducer</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 默认是全部缓存，在这里可以设置需要缓存的状态</span></span><br><span class="line">        ...state</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vue3内容</title>
    <url>/2019/10/16/vue3/</url>
    <content><![CDATA[<h3 id="vue3简介"><a href="#vue3简介" class="headerlink" title="vue3简介"></a>vue3简介</h3><p>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）<br>耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者<br>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></p>
<h4 id="vue3带来了什么"><a href="#vue3带来了什么" class="headerlink" title="vue3带来了什么"></a>vue3带来了什么</h4><p> 1.性能的提升<br>打包大小减少41%</p>
<p>初次渲染快55%, 更新渲染快133%</p>
<p>内存减少54%</p>
<p>…</p>
<p>2.源码的升级<br>使用Proxy代替defineProperty实现响应式</p>
<p>重写虚拟DOM的实现和Tree-Shaking</p>
<p>…</p>
<p>3.拥抱TypeScript<br>Vue3可以更好的支持TypeScript</p>
<h4 id="vue3新的特性"><a href="#vue3新的特性" class="headerlink" title="vue3新的特性"></a>vue3新的特性</h4><p> Composition API（组合API）</p>
<p>setup配置<br>ref与reactive<br>watch与watchEffect<br>provide与inject<br>…<br>新的内置组件</p>
<p>Fragment<br>Teleport<br>Suspense<br>其他改变</p>
<p>新的生命周期钩子<br>data 选项应始终被声明为一个函数<br>移除keyCode支持作为 v-on 的修饰符<br>……</p>
<h4 id="创建vue3项目"><a href="#创建vue3项目" class="headerlink" title="创建vue3项目"></a>创建vue3项目</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> ## 查看@vue/cli版本，确保@vue/cli版本在<span class="number">4.5</span><span class="number">.0</span>以上</span><br><span class="line">vue --version</span><br><span class="line">## 安装或者升级你的@vue/cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">## 创建</span><br><span class="line">vue create vue3_study</span><br><span class="line">## 启动</span><br><span class="line">cd vue3_study</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h3 id="vue2-Options-API的弊端"><a href="#vue2-Options-API的弊端" class="headerlink" title="vue2 Options API的弊端"></a>vue2 Options API的弊端</h3><p> 在Vue2中，我们编写组件的方式是 OptionsAPI：</p>
<p>Options API的一大特点就是在对应的属性中编写对应的功能模块；</p>
<p>比如data定义数据、methods中定义方法、computed中定义计算属性、watch中监听属性改变，也包括生命 周期钩子；<br>但是这种代码有一个很大的弊端：</p>
<p>当我们实现某一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中；</p>
<p>当我们组件变得更大、更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很分散；</p>
<p>尤其对于那些一开始没有编写这些组件的人来说，这个组件的代码是难以阅读和理解的（阅读组件的其他人）；</p>
<h3 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h3><p>我们先来研究一个setup函数的参数，它主要有两个参数：</p>
<p>第一个参数：props</p>
<p>第二个参数：context</p>
<p>props非常好理解，它其实就是父组件传递过来的属性会被放到props对象中，我们在setup中如果需要使用，那么就可以直接通过props参数获取：</p>
<p>对于定义props的类型，我们还是和之前的规则是一样的，在props选项中定义；</p>
<p>并且在template中依然是可以正常去使用props中的属性，比如message；</p>
<p>如果我们在setup函数中想要使用props，那么不可以通过 this 去获取（后面我会讲到为什么）；</p>
<p>因为props有直接作为参数传递到setup函数中，所以我们可以直接通过参数来使用即可；</p>
<p>另外一个参数是context，我们也称之为是一个SetupContext，它里面包含三个属性：</p>
<p>attrs：所有的非prop的attribute；</p>
<p>slots：父组件传递过来的插槽（这个在以渲染函数返回时会有作用，后面会讲到）；</p>
<p>emit：当我们组件内部需要发出事件时会用到emit（因为我们不能访问this，所以不可以通过 this.$emit发出事件）；</p>
<p>setup函数的返回值<br>setup函数的两种返回值：</p>
<p>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）<br>若返回一个渲染函数：则可以自定义渲染内容</p>
<h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><p>作用: 定义一个对象类型的响应式数据（基本类型不要用它，控制台会报警告，要用ref函数）<br>语法：const 代理对象&#x3D; reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy的实例对象，简称proxy对象）<br>reactive定义的响应式数据是“深层次的”。<br>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</p>
<h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><p>作用: 定义一个响应式的数据<br>语法: const xxx &#x3D; ref(initValue)<br>创建一个包含响应式数据的引用对象（reference对象，简称ref对象）, 其内部的值是在ref.value属性中被维护的 。<br>JS中操作数据： xxx.value<br>模板中读取数据: vue自动帮我们进行解包操作，不需要.value，直接：<div></div><br>备注：<br>接收的数据可以是：基本类型、也可以是对象类型。<br>基本类型的数据：响应式依然是靠Object.defineProperty()的get与set完成的。<br>对象类型的数据：内部 求助 了Vue3.0中的一个新函数—— reactive函数。</p>
<h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h4><p>  如果我们使用ES6的解构语法，对reactive返回的对象进行解构获取值，那么之后无论是修改解构后的变量<strong>，还是修改reactive返回的state对象，</strong>数据都不再是响应式的：Vue为我们提供了一个toRefs的函数，可以将reactive返回的对象中的属性都转成ref；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;name,age&#125; = <span class="title function_">toRefs</span>(state)</span><br></pre></td></tr></table></figure>
<p>那么我们再次进行结构出来的 name 和 age 本身都是 ref的；<br>这种做法相当于已经在state.name和ref.value之间建立了 链接，任何一个修改都会引起另外一个变化；</p>
<h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> name= <span class="title function_">toRef</span>(state, <span class="string">&#x27;name &#x27;</span> );<span class="keyword">const</span> &#123;age&#125; = state;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeName</span> = (<span class="params"></span>)=&gt;state.<span class="property">name</span> = <span class="string">&quot;coderwhy&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  如果我们只希望转换一个reactive对象中的属性为ref, 那么可以使用toRef的方法<br>  应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p>
<h4 id="ref-的其他API"><a href="#ref-的其他API" class="headerlink" title="ref 的其他API"></a>ref 的其他API</h4><p>unref<br>如果我们想要获取一个ref引用中的value，那么也可以通过unref方法：</p>
<p>如果参数是一个 ref，则返回内部值，否则返回参数本身；</p>
<p>这是 val &#x3D; isRef(val) ? val.value : val 的语法糖函数；</p>
<p>isRef<br>判断值是否是一个ref对象。</p>
<p>shallowRef<br>创建一个浅层的ref对象；</p>
<p>triggerRef<br>手动触发和 shallowRef 相关联的副作用<br>shallowRef<br>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
<p>什么时候使用?</p>
<p>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。<br>如果有一个对象数据，后续功能不会修改该对象中的属性，而是产生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。<br>customRef<br>创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显示控制：</p>
<p>它需要一个工厂函数，该函数接受 track 和 trigger 函数作为参数；</p>
<p>并且应该返回一个带有 get 和 set 的对象；</p>
<h4 id="ref-amp-reactive"><a href="#ref-amp-reactive" class="headerlink" title="ref &amp; reactive"></a>ref &amp; reactive</h4><p>从定义数据角度对比：<br>ref用来定义：基本类型数据。<br>reactive用来定义：对象（或数组）类型数据。<br>备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过reactive转为代理对象。<br>从原理角度对比：<br>ref通过Object.defineProperty()的get与set来实现响应式（数据劫持）。<br>reactive通过使用Proxy来实现响应式（数据劫持）, 并通过Reflect操作源对象内部的数据。<br>从使用角度对比：<br>ref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。<br>reactive定义的数据：操作数据与读取数据：均不需要.value。</p>
<h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><h4 id="vu2"><a href="#vu2" class="headerlink" title="vu2"></a>vu2</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// vue2.x 双向数据绑定原理是通过Objcet.defineProperty来实现的</span></span><br><span class="line"><span class="comment">// 这种方式有缺点: 数组的长度 数组的内容发生变化检测不到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">phone</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;iphone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let obj = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 视图更新的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视图更新了 ~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>]</span><br><span class="line"><span class="comment">// 将数组的原型保存一份</span></span><br><span class="line"><span class="keyword">let</span> arrProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 创建原型 将数组原型拷贝一份</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrProto)</span><br><span class="line"><span class="comment">// 重写数组的方法</span></span><br><span class="line">methods.<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  proto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// AOP 面向切面编程</span></span><br><span class="line">    <span class="comment">// 改变了数组的数据</span></span><br><span class="line">    arrProto[method].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 重新渲染视图</span></span><br><span class="line">    <span class="title function_">render</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断一个对象是不是数组</span></span><br><span class="line">  <span class="comment">// if(Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27;)&#123;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="comment">// 让观测的对象的原型和我们自己重写的原型建立关系</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = proto</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果观察的是一个对象的话 对其属性进行响应式监听(set、get)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 取出对象中的每一个键和值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 调用响应式处理函数</span></span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, key, obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察obj对象</span></span><br><span class="line"><span class="title function_">observe</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式处理</span></span><br><span class="line"><span class="comment">// Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测对象的属性值是否还是对象</span></span><br><span class="line">  <span class="title function_">observe</span>(val)</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测设置的值是不是对象</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal)</span><br><span class="line">      <span class="comment">// 新值和旧值不相等的时候</span></span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 覆盖掉原来的val值</span></span><br><span class="line">        val = newVal</span><br><span class="line">        <span class="comment">// 通知render函数重新渲染视图</span></span><br><span class="line">        <span class="title function_">render</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// obj.age = 20</span></span><br><span class="line"><span class="comment">// console.log(obj.name, obj.age);</span></span><br><span class="line"><span class="comment">// 至此 基本可以实现数据发生变化 视图更新的效果</span></span><br><span class="line"><span class="comment">// 但是 如果数据有多层呢 也就是属性对应的值也是对象?</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;huawei&#x27;</span></span><br><span class="line"><span class="comment">// console.log(obj.phone.name);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改的值和原来的值一样 不需要重新渲染视图</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;iphone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果重新为对象obj的phone赋值一个新的对象呢? 视图要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone = &#123;name: &#x27;huawei&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且当修改新的对象的属性值时 视图也要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为对象新增属性值呢? 也是没有办法监测到的</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;man&#x27;</span></span><br><span class="line"><span class="comment">// $set来解决这个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$myset</span>(<span class="params">obj, key, val</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj))&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">splice</span>(key, val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">defineReactive</span>(obj, key, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $myset(obj, &#x27;sex&#x27;, &#x27;man&#x27;)</span></span><br><span class="line"><span class="comment">// 修改新增的属性值 视图也能更新</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;woman&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = Object.assign(obj.phone, &#123;price: &#x27;666&#x27;&#125;)</span></span><br><span class="line"><span class="comment">// obj.phone.price = 888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = &#123;...obj.phone, ...&#123;price: &#x27;666&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// obj.phone.price = &#x27;888&#x27;</span></span><br><span class="line"><span class="comment">// 以后vue涉及到给data中的对象新增属性时 有三种方式</span></span><br><span class="line"><span class="comment">// 1、this.$set() || Vue.set()</span></span><br><span class="line"><span class="comment">// 2、obj = Object.assign(原对象, 新对象(新增的属性:值))</span></span><br><span class="line"><span class="comment">// 2、obj = &#123;...原对象, ...新对象(新增的属性:值)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 数组 ======================</span></span><br><span class="line"><span class="comment">// 数组的响应式数据处理依赖的并不是Object.defineProperty 而是对数组的能够引起数据变化的方法进行重写</span></span><br><span class="line"><span class="comment">// obj.push(6)</span></span><br><span class="line"><span class="comment">// obj.length ++ </span></span><br><span class="line"><span class="comment">// obj[0] = 88</span></span><br><span class="line"><span class="comment">// $myset(obj, &#x27;0&#x27;, 66)</span></span><br></pre></td></tr></table></figure>
<h4 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h4> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// vue3响应式原理利用了es6提供的proxy Api</span></span><br><span class="line"><span class="comment">// 可以直接监听到对象和数组内容及长度的变化</span></span><br><span class="line"><span class="comment">// 缺点: 兼容性差 支持就用proxy 不支持就用Objcet.defineProperty</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">girlFriend</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;刘亦菲&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视图重新渲染 ~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="comment">// Reflect.get(target, propertyKey[, receiver])</span></span><br><span class="line">    <span class="comment">// 获取对象身上某个属性的值，类似于 target[name]。</span></span><br><span class="line">    <span class="comment">// 如果属性的值是一个对象的话 则重新进行代理 设置set&amp;get</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target[key] == <span class="string">&#x27;object&#x27;</span> &amp;&amp; target[key] != <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target[key], handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">    <span class="comment">// if(target[key] == &#x27;length&#x27;) return true</span></span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val)</span><br><span class="line">    <span class="title function_">render</span>()</span><br><span class="line">    <span class="comment">// return true表示赋值成功 如果不返回true 在严格模式下可能会报TypeError</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler)</span><br><span class="line"><span class="comment">// 使用代理后的对象</span></span><br><span class="line"><span class="comment">// console.log(proxy.name);</span></span><br><span class="line"><span class="comment">// console.log(proxy.grilFriend);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// 修改深层次的对象的属性 无法监听到</span></span><br><span class="line"><span class="comment">// proxy.grilFriend.name = &#x27;黄圣依&#x27;</span></span><br><span class="line"><span class="comment">// console.log(proxy.name);</span></span><br><span class="line"><span class="comment">// console.log(proxy.grilFriend);</span></span><br><span class="line"><span class="comment">// console.log(obj.name);</span></span><br><span class="line"><span class="comment">// console.log(obj.grilFriend);</span></span><br><span class="line"></span><br><span class="line">proxy.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&#x27;11&#x27;</span></span><br><span class="line">proxy.<span class="property">arr</span>.<span class="property">length</span> ++</span><br><span class="line"><span class="comment">// console.log(proxy.arr.length);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">arr</span>.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
